#include "gtest/gtest.h"

#include <OSP/filter/fir_formii.h>
#include <OSP/multirate_filterbank/elevenband_filtercoef.hpp>
#include <iostream>

using namespace std;

// fir_formii filter test.
// We process 128 byte input signals using Fir Filters configured with coefficients from the eleven band filterbank
// Always test with min phase because the coefficients are not symmetrical

TEST(libosp, Fir1) {
    // band 10 min_phase
    const float expected[] = {
        0.000000e+00,  -3.310223e-02, 1.777834e-01,  -4.059958e-01, 4.539969e-01,  -1.433806e-01, -2.026715e-01,
        1.470893e-01,  1.230527e-01,  -1.102144e-01, -9.830500e-02, 7.367660e-02,  8.847954e-02,  -4.067085e-02,
        -7.962114e-02, 1.224037e-02,  6.704323e-02,  9.857729e-03,  -5.045725e-02, -2.401759e-02, 3.194996e-02,
        2.976862e-02,  -1.453602e-02, -2.819642e-02, 9.142947e-04,  2.169398e-02,  7.412858e-03,  -1.322229e-02,
        -1.045909e-02, 5.409397e-03,  9.559623e-03,  -3.479475e-05, -6.436172e-03, -2.650740e-03, 3.064842e-03,
        3.054193e-03,  -5.735762e-04, -2.176446e-03, -6.674128e-04, 9.994990e-04,  8.855741e-04,  -1.396641e-04,
        -5.759729e-04, -2.258987e-04, 1.885101e-04,  2.260206e-04,  3.975351e-05,  -8.640146e-05, -8.333825e-05,
        -3.438231e-05, -5.069117e-06, 1.095241e-06,  3.525807e-07,  -4.005256e-08, 0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00};

    // impulse
    const float inp[] = {0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};

    const unsigned num = sizeof(inp) / sizeof(inp[0]);
    float out[num];

    // band 10 min_phase
    fir_formii *f = new fir_formii(&elevenband_taps_min[10][0], elevenband_taps_min[10].size(), 128);
    f->process(inp, out, num);

    for (unsigned i = 0; i < num; i++) {
        // cout << out[i] << endl;
        ASSERT_NEAR(out[i], expected[i], .0001);
    }
    delete f;
}

TEST(libosp, Fir2) {
    // band 10 min_phase
    const float expected[] = {
        0.,         -0.03310223, 0.1777834,   -0.37289357, 0.2762135,  0.22951297,  -0.47888502, -0.08242367,
        0.60193765, -0.02779074, -0.70024276, 0.10146733,  0.7887223,  -0.1421382,  -0.8683435,  0.15437855,
        0.93538666, -0.14452083, -0.9858439,  0.12050326,  1.0177939,  -0.09073462, -1.0323299,  0.06253822,
        1.0332441,  -0.04084422, -1.0258313,  0.02762194,  1.0153723,  -0.02221252, -1.0058126,  0.02217771,
        0.9993764,  -0.02482851, -0.99631155, 0.02788265,  0.995738,   -0.03005911, -0.9964055,  0.03105862,
        0.99729097, -0.03119828, -0.997867,   0.03097238,  0.99805546, -0.03074636, -0.99801576, 0.03065999,
        0.99793243, -0.03069432, -0.99793744, 0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545,
        0.9979378,  -0.03069545, -0.9979378,  0.03069545,  0.9979378,  -0.03069545, -0.9979378,  0.03069545};

    // 8khz input
    const float inp[] = {
        0.00000000e+00,  1.00000000e+00,  1.22464680e-16,  -1.00000000e+00, -2.44929360e-16, 1.00000000e+00,
        3.67394040e-16,  -1.00000000e+00, -4.89858720e-16, 1.00000000e+00,  6.12323400e-16,  -1.00000000e+00,
        -7.34788079e-16, 1.00000000e+00,  8.57252759e-16,  -1.00000000e+00, -9.79717439e-16, 1.00000000e+00,
        -6.00324524e-15, -1.00000000e+00, -1.22464680e-15, 1.00000000e+00,  4.89982516e-15,  -1.00000000e+00,
        -1.46957616e-15, 1.00000000e+00,  -1.96067284e-15, -1.00000000e+00, -1.71450552e-15, 1.00000000e+00,
        5.38968388e-15,  -1.00000000e+00, -1.95943488e-15, 1.00000000e+00,  -1.47081412e-15, -1.00000000e+00,
        1.20064905e-14,  1.00000000e+00,  5.87954260e-15,  -1.00000000e+00, -2.44929360e-15, 1.00000000e+00,
        -9.80955401e-16, -1.00000000e+00, -9.79965032e-15, 1.00000000e+00,  6.36940132e-15,  -1.00000000e+00,
        -2.93915232e-15, 1.00000000e+00,  -4.91096681e-16, -1.00000000e+00, 3.92134568e-15,  1.00000000e+00,
        6.85926004e-15,  -1.00000000e+00, -3.42901104e-15, 1.00000000e+00,  -1.23796127e-18, -1.00000000e+00,
        -1.07793678e-14, 1.00000000e+00,  7.34911876e-15,  -1.00000000e+00, -3.91886976e-15, 1.00000000e+00,
        4.88620758e-16,  -1.00000000e+00, 2.94162824e-15,  1.00000000e+00,  7.83897748e-15,  -1.00000000e+00,
        2.40129810e-14,  1.00000000e+00,  9.78479478e-16,  -1.00000000e+00, -1.17590852e-14, 1.00000000e+00,
        8.32883620e-15,  -1.00000000e+00, -4.89858720e-15, 1.00000000e+00,  1.56791929e-14,  -1.00000000e+00,
        1.96191080e-15,  1.00000000e+00,  8.81869492e-15,  -1.00000000e+00, -1.95993006e-14, 1.00000000e+00,
        1.95819692e-15,  -1.00000000e+00, -1.27388026e-14, 1.00000000e+00,  -4.90230108e-15, -1.00000000e+00,
        -5.87830464e-15, 1.00000000e+00,  1.66589104e-14,  -1.00000000e+00, 9.82193362e-16,  1.00000000e+00,
        -1.86232971e-14, -1.00000000e+00, 7.84269136e-15,  1.00000000e+00,  2.93791436e-15,  -1.00000000e+00,
        -1.37185201e-14, 1.00000000e+00,  -3.92258364e-15, -1.00000000e+00, -6.85802208e-15, 1.00000000e+00,
        1.76386278e-14,  -1.00000000e+00, 2.47592255e-18,  1.00000000e+00,  -1.76435796e-14, -1.00000000e+00,
        -2.15587355e-14, 1.00000000e+00,  3.91763180e-15,  -1.00000000e+00, -1.46982375e-14, 1.00000000e+00,
        -2.94286620e-15, -1.00000000e+00};

    const unsigned num = sizeof(inp) / sizeof(inp[0]);
    float out[num];

    // band 10 min_phase
    fir_formii *f = new fir_formii(&elevenband_taps_min[10][0], elevenband_taps_min[10].size(), 128);
    f->process(inp, out, num);

    for (unsigned i = 0; i < num; i++) {
        // cout << out[i] << endl;
        ASSERT_NEAR(out[i], expected[i], .0001);
    }
    delete f;
}

TEST(libosp, Fir3) {
    const float expected[] = {
        0.000000e+00,  1.457181e-03,  8.377303e-03,  2.750272e-02,  6.545821e-02,  1.229703e-01,  1.891068e-01,
        2.405979e-01,  2.498829e-01,  2.001325e-01,  9.912478e-02,  -1.835526e-02, -1.046776e-01, -1.244523e-01,
        -7.580584e-02, 6.874276e-03,  7.260065e-02,  8.455283e-02,  4.201933e-02,  -2.135978e-02, -6.185106e-02,
        -5.540137e-02, -1.218025e-02, 3.354627e-02,  4.962048e-02,  2.847471e-02,  -1.005398e-02, -3.601463e-02,
        -3.226724e-02, -5.551218e-03, 2.136604e-02,  2.859073e-02,  1.359173e-02,  -9.193688e-03, -2.155567e-02,
        -1.582676e-02, 8.161081e-04,  1.403477e-02,  1.439553e-02,  3.830982e-03,  -7.696533e-03, -1.122479e-02,
        -5.549621e-03, 3.219592e-03,  7.745199e-03,  5.409784e-03,  -5.525421e-04, -4.754530e-03, -4.329495e-03,
        -6.615013e-04, 2.626446e-03,  3.044729e-03,  9.655457e-04,  -1.338643e-03, -1.973886e-03, -8.644207e-04,
        6.347861e-04,  1.205086e-03,  6.376239e-04,  -2.845798e-04, -7.012826e-04, -4.146978e-04, 1.274039e-04,
        3.925673e-04,  2.420560e-04,  -6.466336e-05, -2.130143e-04, -1.254348e-04, 4.225965e-05,  1.125123e-04,
        5.409170e-05,  -3.452057e-05, -5.731943e-05, -1.197988e-05, 3.283159e-05,  2.124304e-05,  -2.801780e-05,
        7.082047e-06,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,  0.000000e+00,
        0.000000e+00,  0.000000e+00};

    // impulse
    const float inp[] = {0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};

    const unsigned num = sizeof(inp) / sizeof(inp[0]);
    float out[num];

    // band 0 min_phase
    fir_formii *f = new fir_formii(&elevenband_taps_min[0][0], elevenband_taps_min[0].size(), 128);
    f->process(inp, out, num);

    for (unsigned i = 0; i < num; i++) {
        // cout << out[i] << endl;
        ASSERT_NEAR(out[i], expected[i], .0001);
    }
    delete f;
}

TEST(libosp, Fir4) {
    // 200 Hz input
    const float inp[] = {
        0.00000000e+00,  5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  1.22464680e-16,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, -2.44929360e-16, 5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  3.67394040e-16,  -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -4.89858720e-16, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  6.12323400e-16,  -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -7.34788079e-16, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -2.69546092e-15,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, -9.79717439e-16, 5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  1.10218212e-15,  -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -1.22464680e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  4.89982516e-15,  -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -1.46957616e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -1.96067284e-15,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, 5.39092184e-15,  5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  5.38968388e-15,  -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -1.95943488e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  -1.47081412e-15, -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -2.20436424e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  5.87954260e-15,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, -2.44929360e-15, 5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -9.80955401e-16, -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -9.79965032e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  6.36940132e-15,  -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -2.93915232e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -4.91096681e-16,
        -5.87785252e-01, -9.51056516e-01};

    const float expected[] = {
        0.00000000e+00,  8.56509432e-04,  6.30991673e-03,  2.55188439e-02,  7.34558180e-02,  1.65615290e-01,
        3.05669546e-01,  4.70388323e-01,  6.02312207e-01,  6.21808231e-01,  4.62058842e-01,  1.15029581e-01,
        -3.37464958e-01, -7.34210610e-01, -8.95070255e-01, -7.10002899e-01, -2.11065054e-01, 4.18191463e-01,
        9.12411332e-01,  1.04556620e+00,  7.42995143e-01,  1.24061055e-01,  -5.49419463e-01, -9.93322492e-01,
        -1.02864385e+00, -6.54321194e-01, -3.59796882e-02, 5.74935973e-01,  9.47279453e-01,  9.54531372e-01,
        6.09743476e-01,  4.88594770e-02,  -5.22698164e-01, -9.00006771e-01, -9.46213424e-01, -6.40301585e-01,
        -8.93365219e-02, 5.04001498e-01,  9.13289547e-01,  9.75983799e-01,  6.61361575e-01,  8.75238851e-02,
        -5.23006916e-01, -9.31874394e-01, -9.80244935e-01, -6.51015639e-01, -7.34450892e-02, 5.29384315e-01,
        9.27462101e-01,  9.70892012e-01,  6.45017982e-01,  7.45586827e-02,  -5.23811996e-01, -9.22891140e-01,
        -9.70617354e-01, -6.48108959e-01, -7.76718035e-02, 5.23141682e-01,  9.24507618e-01,  9.72575724e-01,
        6.48740888e-01,  7.68652037e-02,  -5.24295449e-01, -9.24962401e-01, -9.72182691e-01, -6.48100376e-01,
        -7.65909627e-02, 5.24099946e-01,  9.24627304e-01,  9.72044528e-01,  6.48205638e-01,  7.67539814e-02,
        -5.24048865e-01, -9.24689889e-01, -9.72111404e-01, -6.48207068e-01, -7.67260566e-02, 5.24065852e-01,
        9.24682498e-01,  9.72101748e-01,  6.48211241e-01,  7.67260566e-02,  -5.24065852e-01, -9.24682498e-01,
        -9.72101748e-01, -6.48211241e-01, -7.67260566e-02, 5.24065852e-01,  9.24682498e-01,  9.72101748e-01,
        6.48211241e-01,  7.67260566e-02,  -5.24065852e-01, -9.24682498e-01, -9.72101748e-01, -6.48211241e-01,
        -7.67260566e-02, 5.24065852e-01,  9.24682498e-01,  9.72101748e-01,  6.48211241e-01,  7.67260566e-02,
        -5.24065852e-01, -9.24682498e-01, -9.72101748e-01, -6.48211241e-01, -7.67260566e-02, 5.24065852e-01,
        9.24682498e-01,  9.72101748e-01,  6.48211241e-01,  7.67260566e-02,  -5.24065852e-01, -9.24682498e-01,
        -9.72101748e-01, -6.48211241e-01, -7.67260566e-02, 5.24065852e-01,  9.24682498e-01,  9.72101748e-01,
        6.48211241e-01,  7.67260566e-02,  -5.24065852e-01, -9.24682498e-01, -9.72101748e-01, -6.48211241e-01,
        -7.67260566e-02, 5.24065852e-01};

    const unsigned num = sizeof(inp) / sizeof(inp[0]);
    float out[num];

    // band 0 min_phase
    fir_formii *f = new fir_formii(&elevenband_taps_min[0][0], elevenband_taps_min[0].size(), 128);
    f->process(inp, out, num);

    for (unsigned i = 0; i < num; i++) {
        // cout << out[i] << endl;
        ASSERT_NEAR(out[i], expected[i], .0001);
    }
    delete f;
}

TEST(libosp, Fir5) {
    // same input as Fir4, but processed with Band10 instead of Band0
    // 200 Hz input
    const float inp[] = {
        0.00000000e+00,  5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  1.22464680e-16,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, -2.44929360e-16, 5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  3.67394040e-16,  -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -4.89858720e-16, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  6.12323400e-16,  -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -7.34788079e-16, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -2.69546092e-15,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, -9.79717439e-16, 5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  1.10218212e-15,  -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -1.22464680e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  4.89982516e-15,  -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -1.46957616e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -1.96067284e-15,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, 5.39092184e-15,  5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  5.38968388e-15,  -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -1.95943488e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  -1.47081412e-15, -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -2.20436424e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  5.87954260e-15,
        -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01, -2.44929360e-15, 5.87785252e-01,
        9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -9.80955401e-16, -5.87785252e-01, -9.51056516e-01,
        -9.51056516e-01, -5.87785252e-01, -9.79965032e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,
        5.87785252e-01,  6.36940132e-15,  -5.87785252e-01, -9.51056516e-01, -9.51056516e-01, -5.87785252e-01,
        -2.93915232e-15, 5.87785252e-01,  9.51056516e-01,  9.51056516e-01,  5.87785252e-01,  -4.91096681e-16,
        -5.87785252e-01, -9.51056516e-01};

    const float expected[] = {
        0.00000000e+00,  -1.94570012e-02, 7.30163679e-02,  -1.01038359e-01, 3.03527974e-02,  6.58732504e-02,
        -4.28949557e-02, -4.88218740e-02, 3.62280980e-02,  4.26578112e-02,  -2.49886066e-02, -3.97841968e-02,
        1.26234517e-02,  3.63035873e-02,  -6.83147460e-04, -3.02142054e-02, -8.79743323e-03, 2.17738375e-02,
        1.43702403e-02,  -1.26394741e-02, -1.60416216e-02, 4.18109819e-03,  1.42627880e-02,  2.32308358e-03,
        -9.96654108e-03, -5.69786131e-03, 5.10439649e-03,  6.18501753e-03,  -1.24447793e-03, -5.01905009e-03,
        -1.25755370e-03, 2.96385214e-03,  2.27010995e-03,  -8.48837197e-04, -1.84210017e-03, -3.36483121e-04,
        9.60487872e-04,  6.11267984e-04,  -3.63700092e-04, -6.12210482e-04, -1.06438994e-04, 3.57937068e-04,
        3.47055495e-04,  7.08326697e-05,  -1.21701509e-04, -1.34840608e-04, -7.31013715e-05, -3.42801213e-05,
        -3.13147902e-05, -3.65786254e-05, -3.09199095e-05, -1.27591193e-05, 1.04978681e-05,  2.97054648e-05,
        3.75322998e-05,  3.10689211e-05,  1.27293169e-05,  -1.04978681e-05, -2.97054648e-05, -3.75322998e-05,
        -3.10689211e-05, -1.27293169e-05, 1.04978681e-05,  2.97054648e-05,  3.75322998e-05,  3.10689211e-05,
        1.27293169e-05,  -1.04978681e-05, -2.97054648e-05, -3.75322998e-05, -3.10689211e-05, -1.27293169e-05,
        1.04978681e-05,  2.97054648e-05,  3.75322998e-05,  3.10689211e-05,  1.27293169e-05,  -1.04978681e-05,
        -2.97054648e-05, -3.75322998e-05, -3.10689211e-05, -1.27293169e-05, 1.04978681e-05,  2.97054648e-05,
        3.75322998e-05,  3.10689211e-05,  1.27293169e-05,  -1.04978681e-05, -2.97054648e-05, -3.75322998e-05,
        -3.10689211e-05, -1.27293169e-05, 1.04978681e-05,  2.97054648e-05,  3.75322998e-05,  3.10689211e-05,
        1.27293169e-05,  -1.04978681e-05, -2.97054648e-05, -3.75322998e-05, -3.10689211e-05, -1.27293169e-05,
        1.04978681e-05,  2.97054648e-05,  3.75322998e-05,  3.10689211e-05,  1.27293169e-05,  -1.04978681e-05,
        -2.97054648e-05, -3.75322998e-05, -3.10689211e-05, -1.27293169e-05, 1.04978681e-05,  2.97054648e-05,
        3.75322998e-05,  3.10689211e-05,  1.27293169e-05,  -1.04978681e-05, -2.97054648e-05, -3.75322998e-05,
        -3.10689211e-05, -1.27293169e-05, 1.04978681e-05,  2.97054648e-05,  3.75322998e-05,  3.10689211e-05,
        1.27293169e-05,  -1.04978681e-05};

    const unsigned num = sizeof(inp) / sizeof(inp[0]);
    float out[num];

    // band 10 min_phase
    fir_formii *f = new fir_formii(&elevenband_taps_min[10][0], elevenband_taps_min[10].size(), 128);
    f->process(inp, out, num);

    for (unsigned i = 0; i < num; i++) {
        // cout << out[i] << endl;
        ASSERT_NEAR(out[i], expected[i], .0001);
    }
    delete f;
}


int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
