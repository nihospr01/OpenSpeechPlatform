!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(TARGET_EXEC)	examples/read_sensor_data/Makefile	/^$(TARGET_EXEC): $(OBJS)$/;"	t
$(TARGET_EXEC)	examples/tap/Makefile	/^$(TARGET_EXEC): $(OBJS)$/;"	t
%.c.o	examples/read_sensor_data/Makefile	/^%.c.o: %.c$/;"	t
%.c.o	examples/tap/Makefile	/^%.c.o: %.c$/;"	t
API_LOCATION	examples/read_chip_id/Makefile	/^API_LOCATION ?= ..\/..$/;"	m
API_LOCATION	examples/read_sensor_data/Makefile	/^API_LOCATION ?= ..\/..$/;"	m
API_LOCATION	examples/tap/Makefile	/^API_LOCATION ?= ..\/..$/;"	m
BIG_ENDIAN	bmi160_defs.h	/^#define BIG_ENDIAN /;"	d
BMI160_ACCEL_BW_MASK	bmi160_defs.h	/^#define BMI160_ACCEL_BW_MASK /;"	d
BMI160_ACCEL_BW_NORMAL_AVG4	bmi160_defs.h	/^#define BMI160_ACCEL_BW_NORMAL_AVG4 /;"	d
BMI160_ACCEL_BW_OSR2_AVG2	bmi160_defs.h	/^#define BMI160_ACCEL_BW_OSR2_AVG2 /;"	d
BMI160_ACCEL_BW_OSR4_AVG1	bmi160_defs.h	/^#define BMI160_ACCEL_BW_OSR4_AVG1 /;"	d
BMI160_ACCEL_BW_POS	bmi160_defs.h	/^#define BMI160_ACCEL_BW_POS /;"	d
BMI160_ACCEL_BW_RES_AVG128	bmi160_defs.h	/^#define BMI160_ACCEL_BW_RES_AVG128 /;"	d
BMI160_ACCEL_BW_RES_AVG16	bmi160_defs.h	/^#define BMI160_ACCEL_BW_RES_AVG16 /;"	d
BMI160_ACCEL_BW_RES_AVG32	bmi160_defs.h	/^#define BMI160_ACCEL_BW_RES_AVG32 /;"	d
BMI160_ACCEL_BW_RES_AVG64	bmi160_defs.h	/^#define BMI160_ACCEL_BW_RES_AVG64 /;"	d
BMI160_ACCEL_BW_RES_AVG8	bmi160_defs.h	/^#define BMI160_ACCEL_BW_RES_AVG8 /;"	d
BMI160_ACCEL_CONFIG_ADDR	bmi160_defs.h	/^#define BMI160_ACCEL_CONFIG_ADDR /;"	d
BMI160_ACCEL_DATA_ADDR	bmi160_defs.h	/^#define BMI160_ACCEL_DATA_ADDR /;"	d
BMI160_ACCEL_DELAY_MS	bmi160_defs.h	/^#define BMI160_ACCEL_DELAY_MS /;"	d
BMI160_ACCEL_FIFO_DOWN_FIVE	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_FIVE /;"	d
BMI160_ACCEL_FIFO_DOWN_FOUR	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_FOUR /;"	d
BMI160_ACCEL_FIFO_DOWN_ONE	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_ONE /;"	d
BMI160_ACCEL_FIFO_DOWN_SEVEN	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_SEVEN /;"	d
BMI160_ACCEL_FIFO_DOWN_SIX	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_SIX /;"	d
BMI160_ACCEL_FIFO_DOWN_THREE	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_THREE /;"	d
BMI160_ACCEL_FIFO_DOWN_TWO	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_TWO /;"	d
BMI160_ACCEL_FIFO_DOWN_ZERO	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_DOWN_ZERO /;"	d
BMI160_ACCEL_FIFO_FILT_EN	bmi160_defs.h	/^#define  BMI160_ACCEL_FIFO_FILT_EN /;"	d
BMI160_ACCEL_FOC_X_CONF_MSK	bmi160_defs.h	/^#define BMI160_ACCEL_FOC_X_CONF_MSK /;"	d
BMI160_ACCEL_FOC_X_CONF_POS	bmi160_defs.h	/^#define BMI160_ACCEL_FOC_X_CONF_POS /;"	d
BMI160_ACCEL_FOC_Y_CONF_MSK	bmi160_defs.h	/^#define BMI160_ACCEL_FOC_Y_CONF_MSK /;"	d
BMI160_ACCEL_FOC_Y_CONF_POS	bmi160_defs.h	/^#define BMI160_ACCEL_FOC_Y_CONF_POS /;"	d
BMI160_ACCEL_FOC_Z_CONF_MSK	bmi160_defs.h	/^#define BMI160_ACCEL_FOC_Z_CONF_MSK /;"	d
BMI160_ACCEL_LOWPOWER_MODE	bmi160_defs.h	/^#define BMI160_ACCEL_LOWPOWER_MODE /;"	d
BMI160_ACCEL_MAX_OFFSET	bmi160_defs.h	/^#define BMI160_ACCEL_MAX_OFFSET /;"	d
BMI160_ACCEL_MIN_OFFSET	bmi160_defs.h	/^#define BMI160_ACCEL_MIN_OFFSET /;"	d
BMI160_ACCEL_NORMAL_MODE	bmi160_defs.h	/^#define BMI160_ACCEL_NORMAL_MODE /;"	d
BMI160_ACCEL_ODR_0_78HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_0_78HZ /;"	d
BMI160_ACCEL_ODR_100HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_100HZ /;"	d
BMI160_ACCEL_ODR_12_5HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_12_5HZ /;"	d
BMI160_ACCEL_ODR_1600HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_1600HZ /;"	d
BMI160_ACCEL_ODR_1_56HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_1_56HZ /;"	d
BMI160_ACCEL_ODR_200HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_200HZ /;"	d
BMI160_ACCEL_ODR_25HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_25HZ /;"	d
BMI160_ACCEL_ODR_3_12HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_3_12HZ /;"	d
BMI160_ACCEL_ODR_400HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_400HZ /;"	d
BMI160_ACCEL_ODR_50HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_50HZ /;"	d
BMI160_ACCEL_ODR_6_25HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_6_25HZ /;"	d
BMI160_ACCEL_ODR_800HZ	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_800HZ /;"	d
BMI160_ACCEL_ODR_MASK	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_MASK /;"	d
BMI160_ACCEL_ODR_RESERVED	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_RESERVED /;"	d
BMI160_ACCEL_ODR_RESERVED0	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_RESERVED0 /;"	d
BMI160_ACCEL_ODR_RESERVED1	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_RESERVED1 /;"	d
BMI160_ACCEL_ODR_RESERVED2	bmi160_defs.h	/^#define BMI160_ACCEL_ODR_RESERVED2 /;"	d
BMI160_ACCEL_OFFSET_EN_MSK	bmi160_defs.h	/^#define BMI160_ACCEL_OFFSET_EN_MSK /;"	d
BMI160_ACCEL_OFFSET_EN_POS	bmi160_defs.h	/^#define BMI160_ACCEL_OFFSET_EN_POS /;"	d
BMI160_ACCEL_ONLY	bmi160_defs.h	/^    BMI160_ACCEL_ONLY = 1,$/;"	e	enum:bmi160_select_sensor
BMI160_ACCEL_PMU_LOW_POWER	bmi160_defs.h	/^#define BMI160_ACCEL_PMU_LOW_POWER /;"	d
BMI160_ACCEL_PMU_NORMAL	bmi160_defs.h	/^#define BMI160_ACCEL_PMU_NORMAL /;"	d
BMI160_ACCEL_PMU_SUSPEND	bmi160_defs.h	/^#define BMI160_ACCEL_PMU_SUSPEND /;"	d
BMI160_ACCEL_POWER_MODE_MSK	bmi160_defs.h	/^#define BMI160_ACCEL_POWER_MODE_MSK /;"	d
BMI160_ACCEL_POWER_MODE_POS	bmi160_defs.h	/^#define BMI160_ACCEL_POWER_MODE_POS /;"	d
BMI160_ACCEL_RANGE_16G	bmi160_defs.h	/^#define BMI160_ACCEL_RANGE_16G /;"	d
BMI160_ACCEL_RANGE_2G	bmi160_defs.h	/^#define BMI160_ACCEL_RANGE_2G /;"	d
BMI160_ACCEL_RANGE_4G	bmi160_defs.h	/^#define BMI160_ACCEL_RANGE_4G /;"	d
BMI160_ACCEL_RANGE_8G	bmi160_defs.h	/^#define BMI160_ACCEL_RANGE_8G /;"	d
BMI160_ACCEL_RANGE_ADDR	bmi160_defs.h	/^#define BMI160_ACCEL_RANGE_ADDR /;"	d
BMI160_ACCEL_RANGE_MASK	bmi160_defs.h	/^#define BMI160_ACCEL_RANGE_MASK /;"	d
BMI160_ACCEL_SEL	bmi160_defs.h	/^#define BMI160_ACCEL_SEL /;"	d
BMI160_ACCEL_SELF_TEST_CONFIG	bmi160_defs.h	/^#define BMI160_ACCEL_SELF_TEST_CONFIG /;"	d
BMI160_ACCEL_SELF_TEST_DELAY	bmi160_defs.h	/^#define BMI160_ACCEL_SELF_TEST_DELAY /;"	d
BMI160_ACCEL_SELF_TEST_LIMIT	bmi160_defs.h	/^#define BMI160_ACCEL_SELF_TEST_LIMIT /;"	d
BMI160_ACCEL_SELF_TEST_NEGATIVE_EN	bmi160_defs.h	/^#define BMI160_ACCEL_SELF_TEST_NEGATIVE_EN /;"	d
BMI160_ACCEL_SELF_TEST_POSITIVE_EN	bmi160_defs.h	/^#define BMI160_ACCEL_SELF_TEST_POSITIVE_EN /;"	d
BMI160_ACCEL_SUSPEND_MODE	bmi160_defs.h	/^#define BMI160_ACCEL_SUSPEND_MODE /;"	d
BMI160_ACCEL_UNDERSAMPLING_MASK	bmi160_defs.h	/^#define BMI160_ACCEL_UNDERSAMPLING_MASK /;"	d
BMI160_ACC_ANY_MOTION_INT	bmi160_defs.h	/^    BMI160_ACC_ANY_MOTION_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_DOUBLE_TAP_INT	bmi160_defs.h	/^    BMI160_ACC_DOUBLE_TAP_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_FLAT_INT	bmi160_defs.h	/^    BMI160_ACC_FLAT_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_GYRO_DATA_RDY_INT	bmi160_defs.h	/^    BMI160_ACC_GYRO_DATA_RDY_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_GYRO_FIFO_FULL_INT	bmi160_defs.h	/^    BMI160_ACC_GYRO_FIFO_FULL_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_GYRO_FIFO_WATERMARK_INT	bmi160_defs.h	/^    BMI160_ACC_GYRO_FIFO_WATERMARK_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_HIGH_G_INT	bmi160_defs.h	/^    BMI160_ACC_HIGH_G_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_LOW_G_INT	bmi160_defs.h	/^    BMI160_ACC_LOW_G_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_ORIENT_INT	bmi160_defs.h	/^    BMI160_ACC_ORIENT_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_SIG_MOTION_INT	bmi160_defs.h	/^    BMI160_ACC_SIG_MOTION_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_SINGLE_TAP_INT	bmi160_defs.h	/^    BMI160_ACC_SINGLE_TAP_INT,$/;"	e	enum:bmi160_int_types
BMI160_ACC_SLOW_NO_MOTION_INT	bmi160_defs.h	/^    BMI160_ACC_SLOW_NO_MOTION_INT,$/;"	e	enum:bmi160_int_types
BMI160_ANY_MOTION_ALL_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_ANY_MOTION_ALL_INT_EN_MASK /;"	d
BMI160_ANY_MOTION_ENABLED	bmi160_defs.h	/^    BMI160_ANY_MOTION_ENABLED,$/;"	e	enum:bmi160_any_sig_motion_active_interrupt_state
BMI160_ANY_MOTION_X_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_ANY_MOTION_X_INT_EN_MASK /;"	d
BMI160_ANY_MOTION_Y_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_ANY_MOTION_Y_INT_EN_MASK /;"	d
BMI160_ANY_MOTION_Z_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_ANY_MOTION_Z_INT_EN_MASK /;"	d
BMI160_AUX_BMM150_I2C_ADDR	bmi160_defs.h	/^#define BMI160_AUX_BMM150_I2C_ADDR /;"	d
BMI160_AUX_COM_DELAY	bmi160_defs.h	/^#define BMI160_AUX_COM_DELAY /;"	d
BMI160_AUX_DATA_ADDR	bmi160_defs.h	/^#define BMI160_AUX_DATA_ADDR /;"	d
BMI160_AUX_IF_0_ADDR	bmi160_defs.h	/^#define BMI160_AUX_IF_0_ADDR /;"	d
BMI160_AUX_IF_1_ADDR	bmi160_defs.h	/^#define BMI160_AUX_IF_1_ADDR /;"	d
BMI160_AUX_IF_2_ADDR	bmi160_defs.h	/^#define BMI160_AUX_IF_2_ADDR /;"	d
BMI160_AUX_IF_3_ADDR	bmi160_defs.h	/^#define BMI160_AUX_IF_3_ADDR /;"	d
BMI160_AUX_IF_4_ADDR	bmi160_defs.h	/^#define BMI160_AUX_IF_4_ADDR /;"	d
BMI160_AUX_LOWPOWER_MODE	bmi160_defs.h	/^#define BMI160_AUX_LOWPOWER_MODE /;"	d
BMI160_AUX_NORMAL_MODE	bmi160_defs.h	/^#define BMI160_AUX_NORMAL_MODE /;"	d
BMI160_AUX_ODR_0_78HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_0_78HZ /;"	d
BMI160_AUX_ODR_100HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_100HZ /;"	d
BMI160_AUX_ODR_12_5HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_12_5HZ /;"	d
BMI160_AUX_ODR_1_56HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_1_56HZ /;"	d
BMI160_AUX_ODR_200HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_200HZ /;"	d
BMI160_AUX_ODR_25HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_25HZ /;"	d
BMI160_AUX_ODR_3_12HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_3_12HZ /;"	d
BMI160_AUX_ODR_400HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_400HZ /;"	d
BMI160_AUX_ODR_50HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_50HZ /;"	d
BMI160_AUX_ODR_6_25HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_6_25HZ /;"	d
BMI160_AUX_ODR_800HZ	bmi160_defs.h	/^#define BMI160_AUX_ODR_800HZ /;"	d
BMI160_AUX_ODR_ADDR	bmi160_defs.h	/^#define BMI160_AUX_ODR_ADDR /;"	d
BMI160_AUX_ODR_RESERVED	bmi160_defs.h	/^#define BMI160_AUX_ODR_RESERVED /;"	d
BMI160_AUX_PMU_LOW_POWER	bmi160_defs.h	/^#define BMI160_AUX_PMU_LOW_POWER /;"	d
BMI160_AUX_PMU_NORMAL	bmi160_defs.h	/^#define BMI160_AUX_PMU_NORMAL /;"	d
BMI160_AUX_PMU_SUSPEND	bmi160_defs.h	/^#define BMI160_AUX_PMU_SUSPEND /;"	d
BMI160_AUX_READ_BURST_MSK	bmi160_defs.h	/^#define BMI160_AUX_READ_BURST_MSK /;"	d
BMI160_AUX_READ_BURST_POS	bmi160_defs.h	/^#define BMI160_AUX_READ_BURST_POS /;"	d
BMI160_AUX_READ_LEN_0	bmi160_defs.h	/^    BMI160_AUX_READ_LEN_0,$/;"	e	enum:bmi160_aux_read_len
BMI160_AUX_READ_LEN_1	bmi160_defs.h	/^    BMI160_AUX_READ_LEN_1,$/;"	e	enum:bmi160_aux_read_len
BMI160_AUX_READ_LEN_2	bmi160_defs.h	/^    BMI160_AUX_READ_LEN_2,$/;"	e	enum:bmi160_aux_read_len
BMI160_AUX_READ_LEN_3	bmi160_defs.h	/^    BMI160_AUX_READ_LEN_3$/;"	e	enum:bmi160_aux_read_len
BMI160_AUX_SUSPEND_MODE	bmi160_defs.h	/^#define BMI160_AUX_SUSPEND_MODE /;"	d
BMI160_AXES_EN_MASK	bmi160_defs.h	/^#define BMI160_AXES_EN_MASK /;"	d
BMI160_BOTH_ACCEL_AND_GYRO	bmi160_defs.h	/^    BMI160_BOTH_ACCEL_AND_GYRO$/;"	e	enum:bmi160_select_sensor
BMI160_BOTH_ANY_SIG_MOTION_DISABLED	bmi160_defs.h	/^    BMI160_BOTH_ANY_SIG_MOTION_DISABLED = -1,$/;"	e	enum:bmi160_any_sig_motion_active_interrupt_state
BMI160_CHIP_ID	bmi160_defs.h	/^#define BMI160_CHIP_ID /;"	d
BMI160_CHIP_ID_ADDR	bmi160_defs.h	/^#define BMI160_CHIP_ID_ADDR /;"	d
BMI160_COMMAND_REG_ADDR	bmi160_defs.h	/^#define BMI160_COMMAND_REG_ADDR /;"	d
BMI160_CONF_ADDR	bmi160_defs.h	/^#define BMI160_CONF_ADDR /;"	d
BMI160_DATA_RDY_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_DATA_RDY_INT_EN_MASK /;"	d
BMI160_DEFS_H_	bmi160_defs.h	/^#define BMI160_DEFS_H_$/;"	d
BMI160_DEV_ADDR	examples/read_chip_id/read_chip_id.c	/^#define BMI160_DEV_ADDR /;"	d	file:
BMI160_DISABLE	bmi160_defs.h	/^#define BMI160_DISABLE /;"	d
BMI160_DOUBLE_TAP_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_DOUBLE_TAP_INT_EN_MASK /;"	d
BMI160_ENABLE	bmi160_defs.h	/^#define BMI160_ENABLE /;"	d
BMI160_ERROR_REG_ADDR	bmi160_defs.h	/^#define BMI160_ERROR_REG_ADDR /;"	d
BMI160_ERR_REG_MASK	bmi160_defs.h	/^#define BMI160_ERR_REG_MASK /;"	d
BMI160_E_ACCEL_ODR_BW_INVALID	bmi160_defs.h	/^#define BMI160_E_ACCEL_ODR_BW_INVALID /;"	d
BMI160_E_AUX_NOT_FOUND	bmi160_defs.h	/^#define BMI160_E_AUX_NOT_FOUND /;"	d
BMI160_E_COM_FAIL	bmi160_defs.h	/^#define BMI160_E_COM_FAIL /;"	d
BMI160_E_DEV_NOT_FOUND	bmi160_defs.h	/^#define BMI160_E_DEV_NOT_FOUND /;"	d
BMI160_E_GYRO_ODR_BW_INVALID	bmi160_defs.h	/^#define BMI160_E_GYRO_ODR_BW_INVALID /;"	d
BMI160_E_INVALID_INPUT	bmi160_defs.h	/^#define BMI160_E_INVALID_INPUT /;"	d
BMI160_E_LWP_PRE_FLTR_INT_INVALID	bmi160_defs.h	/^#define BMI160_E_LWP_PRE_FLTR_INT_INVALID /;"	d
BMI160_E_LWP_PRE_FLTR_INVALID	bmi160_defs.h	/^#define BMI160_E_LWP_PRE_FLTR_INVALID /;"	d
BMI160_E_NULL_PTR	bmi160_defs.h	/^#define BMI160_E_NULL_PTR /;"	d
BMI160_E_OUT_OF_RANGE	bmi160_defs.h	/^#define BMI160_E_OUT_OF_RANGE /;"	d
BMI160_FIFO_ACCEL	bmi160_defs.h	/^#define BMI160_FIFO_ACCEL /;"	d
BMI160_FIFO_AUX	bmi160_defs.h	/^#define BMI160_FIFO_AUX /;"	d
BMI160_FIFO_A_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_A_ENABLE /;"	d
BMI160_FIFO_A_LENGTH	bmi160_defs.h	/^#define BMI160_FIFO_A_LENGTH /;"	d
BMI160_FIFO_BYTES_OVERREAD	bmi160_defs.h	/^#define BMI160_FIFO_BYTES_OVERREAD /;"	d
BMI160_FIFO_BYTE_COUNTER_MASK	bmi160_defs.h	/^#define BMI160_FIFO_BYTE_COUNTER_MASK /;"	d
BMI160_FIFO_CONFIG_0_ADDR	bmi160_defs.h	/^#define BMI160_FIFO_CONFIG_0_ADDR /;"	d
BMI160_FIFO_CONFIG_1_ADDR	bmi160_defs.h	/^#define BMI160_FIFO_CONFIG_1_ADDR /;"	d
BMI160_FIFO_CONFIG_1_MASK	bmi160_defs.h	/^#define BMI160_FIFO_CONFIG_1_MASK /;"	d
BMI160_FIFO_DATA_ADDR	bmi160_defs.h	/^#define BMI160_FIFO_DATA_ADDR /;"	d
BMI160_FIFO_DOWN_ADDR	bmi160_defs.h	/^#define BMI160_FIFO_DOWN_ADDR /;"	d
BMI160_FIFO_FLUSH_VALUE	bmi160_defs.h	/^#define BMI160_FIFO_FLUSH_VALUE /;"	d
BMI160_FIFO_FULL_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_FIFO_FULL_INT_EN_MASK /;"	d
BMI160_FIFO_FULL_INT_MSK	bmi160_defs.h	/^#define BMI160_FIFO_FULL_INT_MSK /;"	d
BMI160_FIFO_FULL_INT_PIN1_MSK	bmi160_defs.h	/^#define BMI160_FIFO_FULL_INT_PIN1_MSK /;"	d
BMI160_FIFO_FULL_INT_PIN1_POS	bmi160_defs.h	/^#define BMI160_FIFO_FULL_INT_PIN1_POS /;"	d
BMI160_FIFO_FULL_INT_PIN2_MSK	bmi160_defs.h	/^#define BMI160_FIFO_FULL_INT_PIN2_MSK /;"	d
BMI160_FIFO_FULL_INT_PIN2_POS	bmi160_defs.h	/^#define BMI160_FIFO_FULL_INT_PIN2_POS /;"	d
BMI160_FIFO_FULL_INT_POS	bmi160_defs.h	/^#define BMI160_FIFO_FULL_INT_POS /;"	d
BMI160_FIFO_GA_LENGTH	bmi160_defs.h	/^#define BMI160_FIFO_GA_LENGTH /;"	d
BMI160_FIFO_GYRO	bmi160_defs.h	/^#define BMI160_FIFO_GYRO /;"	d
BMI160_FIFO_G_A_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_G_A_ENABLE /;"	d
BMI160_FIFO_G_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_G_ENABLE /;"	d
BMI160_FIFO_G_LENGTH	bmi160_defs.h	/^#define BMI160_FIFO_G_LENGTH /;"	d
BMI160_FIFO_HEADER	bmi160_defs.h	/^#define BMI160_FIFO_HEADER /;"	d
BMI160_FIFO_HEAD_A	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_A /;"	d
BMI160_FIFO_HEAD_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_ENABLE /;"	d
BMI160_FIFO_HEAD_G	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_G /;"	d
BMI160_FIFO_HEAD_G_A	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_G_A /;"	d
BMI160_FIFO_HEAD_INPUT_CONFIG	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_INPUT_CONFIG /;"	d
BMI160_FIFO_HEAD_M	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_M /;"	d
BMI160_FIFO_HEAD_M_A	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_M_A /;"	d
BMI160_FIFO_HEAD_M_G	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_M_G /;"	d
BMI160_FIFO_HEAD_M_G_A	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_M_G_A /;"	d
BMI160_FIFO_HEAD_OVER_READ	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_OVER_READ /;"	d
BMI160_FIFO_HEAD_SENSOR_TIME	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_SENSOR_TIME /;"	d
BMI160_FIFO_HEAD_SKIP_FRAME	bmi160_defs.h	/^#define BMI160_FIFO_HEAD_SKIP_FRAME /;"	d
BMI160_FIFO_LENGTH_ADDR	bmi160_defs.h	/^#define BMI160_FIFO_LENGTH_ADDR /;"	d
BMI160_FIFO_LEVEL_MARGIN	bmi160_defs.h	/^#define BMI160_FIFO_LEVEL_MARGIN /;"	d
BMI160_FIFO_MA_LENGTH	bmi160_defs.h	/^#define BMI160_FIFO_MA_LENGTH /;"	d
BMI160_FIFO_MGA_LENGTH	bmi160_defs.h	/^#define BMI160_FIFO_MGA_LENGTH /;"	d
BMI160_FIFO_MG_LENGTH	bmi160_defs.h	/^#define BMI160_FIFO_MG_LENGTH /;"	d
BMI160_FIFO_M_A_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_M_A_ENABLE /;"	d
BMI160_FIFO_M_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_M_ENABLE /;"	d
BMI160_FIFO_M_G_A_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_M_G_A_ENABLE /;"	d
BMI160_FIFO_M_G_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_M_G_ENABLE /;"	d
BMI160_FIFO_M_LENGTH	bmi160_defs.h	/^#define BMI160_FIFO_M_LENGTH /;"	d
BMI160_FIFO_TAG_INT1	bmi160_defs.h	/^#define BMI160_FIFO_TAG_INT1 /;"	d
BMI160_FIFO_TAG_INT1_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_TAG_INT1_ENABLE /;"	d
BMI160_FIFO_TAG_INT2	bmi160_defs.h	/^#define BMI160_FIFO_TAG_INT2 /;"	d
BMI160_FIFO_TAG_INT2_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_TAG_INT2_ENABLE /;"	d
BMI160_FIFO_TAG_INTR_MASK	bmi160_defs.h	/^#define BMI160_FIFO_TAG_INTR_MASK /;"	d
BMI160_FIFO_TAG_INT_PIN	bmi160_defs.h	/^    BMI160_FIFO_TAG_INT_PIN$/;"	e	enum:bmi160_int_types
BMI160_FIFO_TIME	bmi160_defs.h	/^#define BMI160_FIFO_TIME /;"	d
BMI160_FIFO_TIME_ENABLE	bmi160_defs.h	/^#define BMI160_FIFO_TIME_ENABLE /;"	d
BMI160_FIFO_WATERMARK_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_FIFO_WATERMARK_INT_EN_MASK /;"	d
BMI160_FIFO_WTM_INT_MSK	bmi160_defs.h	/^#define BMI160_FIFO_WTM_INT_MSK /;"	d
BMI160_FIFO_WTM_INT_PIN1_MSK	bmi160_defs.h	/^#define BMI160_FIFO_WTM_INT_PIN1_MSK /;"	d
BMI160_FIFO_WTM_INT_PIN1_POS	bmi160_defs.h	/^#define BMI160_FIFO_WTM_INT_PIN1_POS /;"	d
BMI160_FIFO_WTM_INT_PIN2_MSK	bmi160_defs.h	/^#define BMI160_FIFO_WTM_INT_PIN2_MSK /;"	d
BMI160_FIFO_WTM_INT_PIN2_POS	bmi160_defs.h	/^#define BMI160_FIFO_WTM_INT_PIN2_POS /;"	d
BMI160_FIFO_WTM_INT_POS	bmi160_defs.h	/^#define BMI160_FIFO_WTM_INT_POS /;"	d
BMI160_FIVE	bmi160_defs.h	/^#define BMI160_FIVE /;"	d
BMI160_FLAT_HOLD_TIME_MASK	bmi160_defs.h	/^#define BMI160_FLAT_HOLD_TIME_MASK /;"	d
BMI160_FLAT_HYST_MASK	bmi160_defs.h	/^#define BMI160_FLAT_HYST_MASK /;"	d
BMI160_FLAT_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_FLAT_INT_EN_MASK /;"	d
BMI160_FLAT_THRES_MASK	bmi160_defs.h	/^#define BMI160_FLAT_THRES_MASK /;"	d
BMI160_FOC_ACCEL_0G	bmi160_defs.h	/^#define BMI160_FOC_ACCEL_0G /;"	d
BMI160_FOC_ACCEL_DISABLED	bmi160_defs.h	/^#define BMI160_FOC_ACCEL_DISABLED /;"	d
BMI160_FOC_ACCEL_NEGATIVE_G	bmi160_defs.h	/^#define BMI160_FOC_ACCEL_NEGATIVE_G /;"	d
BMI160_FOC_ACCEL_POSITIVE_G	bmi160_defs.h	/^#define BMI160_FOC_ACCEL_POSITIVE_G /;"	d
BMI160_FOC_CONF_ADDR	bmi160_defs.h	/^#define BMI160_FOC_CONF_ADDR /;"	d
BMI160_FOC_FAILURE	bmi160_defs.h	/^#define BMI160_FOC_FAILURE /;"	d
BMI160_FOC_STATUS_MSK	bmi160_defs.h	/^#define BMI160_FOC_STATUS_MSK /;"	d
BMI160_FOC_STATUS_POS	bmi160_defs.h	/^#define BMI160_FOC_STATUS_POS /;"	d
BMI160_FOUR	bmi160_defs.h	/^#define BMI160_FOUR /;"	d
BMI160_GET_BITS	bmi160_defs.h	/^#define BMI160_GET_BITS(/;"	d
BMI160_GET_BITS_POS_0	bmi160_defs.h	/^#define BMI160_GET_BITS_POS_0(/;"	d
BMI160_GET_LSB	bmi160_defs.h	/^#define BMI160_GET_LSB(/;"	d
BMI160_GET_MSB	bmi160_defs.h	/^#define BMI160_GET_MSB(/;"	d
BMI160_GYRO_BW_MASK	bmi160_defs.h	/^#define BMI160_GYRO_BW_MASK /;"	d
BMI160_GYRO_BW_NORMAL_MODE	bmi160_defs.h	/^#define BMI160_GYRO_BW_NORMAL_MODE /;"	d
BMI160_GYRO_BW_OSR2_MODE	bmi160_defs.h	/^#define BMI160_GYRO_BW_OSR2_MODE /;"	d
BMI160_GYRO_BW_OSR4_MODE	bmi160_defs.h	/^#define BMI160_GYRO_BW_OSR4_MODE /;"	d
BMI160_GYRO_BW_POS	bmi160_defs.h	/^#define BMI160_GYRO_BW_POS /;"	d
BMI160_GYRO_CONFIG_ADDR	bmi160_defs.h	/^#define BMI160_GYRO_CONFIG_ADDR /;"	d
BMI160_GYRO_DATA_ADDR	bmi160_defs.h	/^#define BMI160_GYRO_DATA_ADDR /;"	d
BMI160_GYRO_DELAY_MS	bmi160_defs.h	/^#define BMI160_GYRO_DELAY_MS /;"	d
BMI160_GYRO_FASTSTARTUP_MODE	bmi160_defs.h	/^#define BMI160_GYRO_FASTSTARTUP_MODE /;"	d
BMI160_GYRO_FIFO_DOWN_FIVE	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_FIVE /;"	d
BMI160_GYRO_FIFO_DOWN_FOUR	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_FOUR /;"	d
BMI160_GYRO_FIFO_DOWN_ONE	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_ONE /;"	d
BMI160_GYRO_FIFO_DOWN_SEVEN	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_SEVEN /;"	d
BMI160_GYRO_FIFO_DOWN_SIX	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_SIX /;"	d
BMI160_GYRO_FIFO_DOWN_THREE	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_THREE /;"	d
BMI160_GYRO_FIFO_DOWN_TWO	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_TWO /;"	d
BMI160_GYRO_FIFO_DOWN_ZERO	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_DOWN_ZERO /;"	d
BMI160_GYRO_FIFO_FILT_EN	bmi160_defs.h	/^#define  BMI160_GYRO_FIFO_FILT_EN /;"	d
BMI160_GYRO_FOC_EN_MSK	bmi160_defs.h	/^#define BMI160_GYRO_FOC_EN_MSK /;"	d
BMI160_GYRO_FOC_EN_POS	bmi160_defs.h	/^#define BMI160_GYRO_FOC_EN_POS /;"	d
BMI160_GYRO_MAX_OFFSET	bmi160_defs.h	/^#define BMI160_GYRO_MAX_OFFSET /;"	d
BMI160_GYRO_MIN_OFFSET	bmi160_defs.h	/^#define BMI160_GYRO_MIN_OFFSET /;"	d
BMI160_GYRO_NORMAL_MODE	bmi160_defs.h	/^#define BMI160_GYRO_NORMAL_MODE /;"	d
BMI160_GYRO_ODR_100HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_100HZ /;"	d
BMI160_GYRO_ODR_1600HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_1600HZ /;"	d
BMI160_GYRO_ODR_200HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_200HZ /;"	d
BMI160_GYRO_ODR_25HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_25HZ /;"	d
BMI160_GYRO_ODR_3200HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_3200HZ /;"	d
BMI160_GYRO_ODR_400HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_400HZ /;"	d
BMI160_GYRO_ODR_50HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_50HZ /;"	d
BMI160_GYRO_ODR_800HZ	bmi160_defs.h	/^#define BMI160_GYRO_ODR_800HZ /;"	d
BMI160_GYRO_ODR_MASK	bmi160_defs.h	/^#define BMI160_GYRO_ODR_MASK /;"	d
BMI160_GYRO_ODR_RESERVED	bmi160_defs.h	/^#define BMI160_GYRO_ODR_RESERVED /;"	d
BMI160_GYRO_OFFSET_EN_MSK	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_EN_MSK /;"	d
BMI160_GYRO_OFFSET_EN_POS	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_EN_POS /;"	d
BMI160_GYRO_OFFSET_MSK	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_MSK /;"	d
BMI160_GYRO_OFFSET_POS	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_POS /;"	d
BMI160_GYRO_OFFSET_X_MSK	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_X_MSK /;"	d
BMI160_GYRO_OFFSET_Y_MSK	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_Y_MSK /;"	d
BMI160_GYRO_OFFSET_Y_POS	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_Y_POS /;"	d
BMI160_GYRO_OFFSET_Z_MSK	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_Z_MSK /;"	d
BMI160_GYRO_OFFSET_Z_POS	bmi160_defs.h	/^#define BMI160_GYRO_OFFSET_Z_POS /;"	d
BMI160_GYRO_ONLY	bmi160_defs.h	/^    BMI160_GYRO_ONLY,$/;"	e	enum:bmi160_select_sensor
BMI160_GYRO_PMU_FSU	bmi160_defs.h	/^#define BMI160_GYRO_PMU_FSU /;"	d
BMI160_GYRO_PMU_NORMAL	bmi160_defs.h	/^#define BMI160_GYRO_PMU_NORMAL /;"	d
BMI160_GYRO_PMU_SUSPEND	bmi160_defs.h	/^#define BMI160_GYRO_PMU_SUSPEND /;"	d
BMI160_GYRO_POWER_MODE_MSK	bmi160_defs.h	/^#define BMI160_GYRO_POWER_MODE_MSK /;"	d
BMI160_GYRO_POWER_MODE_POS	bmi160_defs.h	/^#define BMI160_GYRO_POWER_MODE_POS /;"	d
BMI160_GYRO_RANGE_1000_DPS	bmi160_defs.h	/^#define BMI160_GYRO_RANGE_1000_DPS /;"	d
BMI160_GYRO_RANGE_125_DPS	bmi160_defs.h	/^#define BMI160_GYRO_RANGE_125_DPS /;"	d
BMI160_GYRO_RANGE_2000_DPS	bmi160_defs.h	/^#define BMI160_GYRO_RANGE_2000_DPS /;"	d
BMI160_GYRO_RANGE_250_DPS	bmi160_defs.h	/^#define BMI160_GYRO_RANGE_250_DPS /;"	d
BMI160_GYRO_RANGE_500_DPS	bmi160_defs.h	/^#define BMI160_GYRO_RANGE_500_DPS /;"	d
BMI160_GYRO_RANGE_ADDR	bmi160_defs.h	/^#define BMI160_GYRO_RANGE_ADDR /;"	d
BMI160_GYRO_RANGE_MASK	bmi160_defs.h	/^#define BMI160_GYRO_RANGE_MASK /;"	d
BMI160_GYRO_SEL	bmi160_defs.h	/^#define BMI160_GYRO_SEL /;"	d
BMI160_GYRO_SELF_TEST_DELAY	bmi160_defs.h	/^#define BMI160_GYRO_SELF_TEST_DELAY /;"	d
BMI160_GYRO_SELF_TEST_MSK	bmi160_defs.h	/^#define BMI160_GYRO_SELF_TEST_MSK /;"	d
BMI160_GYRO_SELF_TEST_POS	bmi160_defs.h	/^#define BMI160_GYRO_SELF_TEST_POS /;"	d
BMI160_GYRO_SELF_TEST_STATUS_MSK	bmi160_defs.h	/^#define BMI160_GYRO_SELF_TEST_STATUS_MSK /;"	d
BMI160_GYRO_SELF_TEST_STATUS_POS	bmi160_defs.h	/^#define BMI160_GYRO_SELF_TEST_STATUS_POS /;"	d
BMI160_GYRO_SUSPEND_MODE	bmi160_defs.h	/^#define BMI160_GYRO_SUSPEND_MODE /;"	d
BMI160_HIGH_G_HYST_MASK	bmi160_defs.h	/^#define BMI160_HIGH_G_HYST_MASK /;"	d
BMI160_HIGH_G_X_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_HIGH_G_X_INT_EN_MASK /;"	d
BMI160_HIGH_G_Y_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_HIGH_G_Y_INT_EN_MASK /;"	d
BMI160_HIGH_G_Z_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_HIGH_G_Z_INT_EN_MASK /;"	d
BMI160_H_	bmi160.h	/^#define BMI160_H_$/;"	d
BMI160_I2C_ADDR	bmi160_defs.h	/^#define BMI160_I2C_ADDR /;"	d
BMI160_I2C_INTF	bmi160_defs.h	/^#define BMI160_I2C_INTF /;"	d
BMI160_IF_CONF_ADDR	bmi160_defs.h	/^#define BMI160_IF_CONF_ADDR /;"	d
BMI160_INT1_DATA_READY_MASK	bmi160_defs.h	/^#define BMI160_INT1_DATA_READY_MASK /;"	d
BMI160_INT1_DOUBLE_TAP_MASK	bmi160_defs.h	/^#define BMI160_INT1_DOUBLE_TAP_MASK /;"	d
BMI160_INT1_EDGE_CTRL_MASK	bmi160_defs.h	/^#define BMI160_INT1_EDGE_CTRL_MASK /;"	d
BMI160_INT1_FIFO_FULL_MASK	bmi160_defs.h	/^#define BMI160_INT1_FIFO_FULL_MASK /;"	d
BMI160_INT1_FIFO_WM_MASK	bmi160_defs.h	/^#define BMI160_INT1_FIFO_WM_MASK /;"	d
BMI160_INT1_FLAT_MASK	bmi160_defs.h	/^#define BMI160_INT1_FLAT_MASK /;"	d
BMI160_INT1_HIGH_G_MASK	bmi160_defs.h	/^#define BMI160_INT1_HIGH_G_MASK /;"	d
BMI160_INT1_INPUT_EN_MASK	bmi160_defs.h	/^#define BMI160_INT1_INPUT_EN_MASK /;"	d
BMI160_INT1_LOW_G_MASK	bmi160_defs.h	/^#define BMI160_INT1_LOW_G_MASK /;"	d
BMI160_INT1_LOW_STEP_DETECT_MASK	bmi160_defs.h	/^#define BMI160_INT1_LOW_STEP_DETECT_MASK /;"	d
BMI160_INT1_NO_MOTION_MASK	bmi160_defs.h	/^#define BMI160_INT1_NO_MOTION_MASK /;"	d
BMI160_INT1_ORIENT_MASK	bmi160_defs.h	/^#define BMI160_INT1_ORIENT_MASK /;"	d
BMI160_INT1_OUTPUT_EN_MASK	bmi160_defs.h	/^#define BMI160_INT1_OUTPUT_EN_MASK /;"	d
BMI160_INT1_OUTPUT_MODE_MASK	bmi160_defs.h	/^#define BMI160_INT1_OUTPUT_MODE_MASK /;"	d
BMI160_INT1_OUTPUT_TYPE_MASK	bmi160_defs.h	/^#define BMI160_INT1_OUTPUT_TYPE_MASK /;"	d
BMI160_INT1_SINGLE_TAP_MASK	bmi160_defs.h	/^#define BMI160_INT1_SINGLE_TAP_MASK /;"	d
BMI160_INT1_SLOPE_MASK	bmi160_defs.h	/^#define BMI160_INT1_SLOPE_MASK /;"	d
BMI160_INT2_DATA_READY_MASK	bmi160_defs.h	/^#define BMI160_INT2_DATA_READY_MASK /;"	d
BMI160_INT2_DOUBLE_TAP_MASK	bmi160_defs.h	/^#define BMI160_INT2_DOUBLE_TAP_MASK /;"	d
BMI160_INT2_EDGE_CTRL_MASK	bmi160_defs.h	/^#define BMI160_INT2_EDGE_CTRL_MASK /;"	d
BMI160_INT2_FIFO_FULL_MASK	bmi160_defs.h	/^#define BMI160_INT2_FIFO_FULL_MASK /;"	d
BMI160_INT2_FIFO_WM_MASK	bmi160_defs.h	/^#define BMI160_INT2_FIFO_WM_MASK /;"	d
BMI160_INT2_FLAT_MASK	bmi160_defs.h	/^#define BMI160_INT2_FLAT_MASK /;"	d
BMI160_INT2_HIGH_G_MASK	bmi160_defs.h	/^#define BMI160_INT2_HIGH_G_MASK /;"	d
BMI160_INT2_INPUT_EN_MASK	bmi160_defs.h	/^#define BMI160_INT2_INPUT_EN_MASK /;"	d
BMI160_INT2_LOW_G_MASK	bmi160_defs.h	/^#define BMI160_INT2_LOW_G_MASK /;"	d
BMI160_INT2_LOW_STEP_DETECT_MASK	bmi160_defs.h	/^#define BMI160_INT2_LOW_STEP_DETECT_MASK /;"	d
BMI160_INT2_NO_MOTION_MASK	bmi160_defs.h	/^#define BMI160_INT2_NO_MOTION_MASK /;"	d
BMI160_INT2_ORIENT_MASK	bmi160_defs.h	/^#define BMI160_INT2_ORIENT_MASK /;"	d
BMI160_INT2_OUTPUT_EN_MASK	bmi160_defs.h	/^#define BMI160_INT2_OUTPUT_EN_MASK /;"	d
BMI160_INT2_OUTPUT_MODE_MASK	bmi160_defs.h	/^#define BMI160_INT2_OUTPUT_MODE_MASK /;"	d
BMI160_INT2_OUTPUT_TYPE_MASK	bmi160_defs.h	/^#define BMI160_INT2_OUTPUT_TYPE_MASK /;"	d
BMI160_INT2_SINGLE_TAP_MASK	bmi160_defs.h	/^#define BMI160_INT2_SINGLE_TAP_MASK /;"	d
BMI160_INT2_SLOPE_MASK	bmi160_defs.h	/^#define BMI160_INT2_SLOPE_MASK /;"	d
BMI160_INTERFACE_I2C	examples/read_chip_id/read_chip_id.c	/^#define BMI160_INTERFACE_I2C /;"	d	file:
BMI160_INTERFACE_SPI	examples/read_chip_id/read_chip_id.c	/^#define BMI160_INTERFACE_SPI /;"	d	file:
BMI160_INTL_PULLUP_CONF_ADDR	bmi160_defs.h	/^#define BMI160_INTL_PULLUP_CONF_ADDR /;"	d
BMI160_INT_CHANNEL_1	bmi160_defs.h	/^    BMI160_INT_CHANNEL_1,$/;"	e	enum:bmi160_int_channel
BMI160_INT_CHANNEL_2	bmi160_defs.h	/^    BMI160_INT_CHANNEL_2,$/;"	e	enum:bmi160_int_channel
BMI160_INT_CHANNEL_BOTH	bmi160_defs.h	/^    BMI160_INT_CHANNEL_BOTH$/;"	e	enum:bmi160_int_channel
BMI160_INT_CHANNEL_NONE	bmi160_defs.h	/^    BMI160_INT_CHANNEL_NONE,$/;"	e	enum:bmi160_int_channel
BMI160_INT_DATA_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_DATA_0_ADDR /;"	d
BMI160_INT_DATA_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_DATA_1_ADDR /;"	d
BMI160_INT_ENABLE_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_ENABLE_0_ADDR /;"	d
BMI160_INT_ENABLE_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_ENABLE_1_ADDR /;"	d
BMI160_INT_ENABLE_2_ADDR	bmi160_defs.h	/^#define BMI160_INT_ENABLE_2_ADDR /;"	d
BMI160_INT_FLAT_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_FLAT_0_ADDR /;"	d
BMI160_INT_FLAT_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_FLAT_1_ADDR /;"	d
BMI160_INT_LATCH_ADDR	bmi160_defs.h	/^#define BMI160_INT_LATCH_ADDR /;"	d
BMI160_INT_LATCH_MASK	bmi160_defs.h	/^#define BMI160_INT_LATCH_MASK /;"	d
BMI160_INT_LOWHIGH_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_LOWHIGH_0_ADDR /;"	d
BMI160_INT_LOWHIGH_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_LOWHIGH_1_ADDR /;"	d
BMI160_INT_LOWHIGH_2_ADDR	bmi160_defs.h	/^#define BMI160_INT_LOWHIGH_2_ADDR /;"	d
BMI160_INT_LOWHIGH_3_ADDR	bmi160_defs.h	/^#define BMI160_INT_LOWHIGH_3_ADDR /;"	d
BMI160_INT_LOWHIGH_4_ADDR	bmi160_defs.h	/^#define BMI160_INT_LOWHIGH_4_ADDR /;"	d
BMI160_INT_MAP_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_MAP_0_ADDR /;"	d
BMI160_INT_MAP_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_MAP_1_ADDR /;"	d
BMI160_INT_MAP_2_ADDR	bmi160_defs.h	/^#define BMI160_INT_MAP_2_ADDR /;"	d
BMI160_INT_MOTION_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_MOTION_0_ADDR /;"	d
BMI160_INT_MOTION_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_MOTION_1_ADDR /;"	d
BMI160_INT_MOTION_2_ADDR	bmi160_defs.h	/^#define BMI160_INT_MOTION_2_ADDR /;"	d
BMI160_INT_MOTION_3_ADDR	bmi160_defs.h	/^#define BMI160_INT_MOTION_3_ADDR /;"	d
BMI160_INT_ORIENT_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_ORIENT_0_ADDR /;"	d
BMI160_INT_ORIENT_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_ORIENT_1_ADDR /;"	d
BMI160_INT_OUT_CTRL_ADDR	bmi160_defs.h	/^#define BMI160_INT_OUT_CTRL_ADDR /;"	d
BMI160_INT_STATUS_0	bmi160_defs.h	/^    BMI160_INT_STATUS_0 = 1,$/;"	e	enum:bmi160_int_status_sel
BMI160_INT_STATUS_1	bmi160_defs.h	/^    BMI160_INT_STATUS_1 = 2,$/;"	e	enum:bmi160_int_status_sel
BMI160_INT_STATUS_2	bmi160_defs.h	/^    BMI160_INT_STATUS_2 = 4,$/;"	e	enum:bmi160_int_status_sel
BMI160_INT_STATUS_3	bmi160_defs.h	/^    BMI160_INT_STATUS_3 = 8,$/;"	e	enum:bmi160_int_status_sel
BMI160_INT_STATUS_ADDR	bmi160_defs.h	/^#define BMI160_INT_STATUS_ADDR /;"	d
BMI160_INT_STATUS_ALL	bmi160_defs.h	/^    BMI160_INT_STATUS_ALL = 15$/;"	e	enum:bmi160_int_status_sel
BMI160_INT_STEP_CNT_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_STEP_CNT_0_ADDR /;"	d
BMI160_INT_STEP_CONFIG_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_STEP_CONFIG_0_ADDR /;"	d
BMI160_INT_STEP_CONFIG_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_STEP_CONFIG_1_ADDR /;"	d
BMI160_INT_TAP_0_ADDR	bmi160_defs.h	/^#define BMI160_INT_TAP_0_ADDR /;"	d
BMI160_INT_TAP_1_ADDR	bmi160_defs.h	/^#define BMI160_INT_TAP_1_ADDR /;"	d
BMI160_LATCHED	bmi160_defs.h	/^#define BMI160_LATCHED /;"	d
BMI160_LATCH_DUR_10_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_10_MILLI_SEC /;"	d
BMI160_LATCH_DUR_160_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_160_MILLI_SEC /;"	d
BMI160_LATCH_DUR_1_25_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_1_25_MILLI_SEC /;"	d
BMI160_LATCH_DUR_1_28_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_1_28_SEC /;"	d
BMI160_LATCH_DUR_20_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_20_MILLI_SEC /;"	d
BMI160_LATCH_DUR_2_56_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_2_56_SEC /;"	d
BMI160_LATCH_DUR_2_5_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_2_5_MILLI_SEC /;"	d
BMI160_LATCH_DUR_312_5_MICRO_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_312_5_MICRO_SEC /;"	d
BMI160_LATCH_DUR_320_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_320_MILLI_SEC /;"	d
BMI160_LATCH_DUR_40_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_40_MILLI_SEC /;"	d
BMI160_LATCH_DUR_5_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_5_MILLI_SEC /;"	d
BMI160_LATCH_DUR_625_MICRO_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_625_MICRO_SEC /;"	d
BMI160_LATCH_DUR_640_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_640_MILLI_SEC /;"	d
BMI160_LATCH_DUR_80_MILLI_SEC	bmi160_defs.h	/^#define BMI160_LATCH_DUR_80_MILLI_SEC /;"	d
BMI160_LATCH_DUR_NONE	bmi160_defs.h	/^#define BMI160_LATCH_DUR_NONE /;"	d
BMI160_LOW_G_HYST_MASK	bmi160_defs.h	/^#define BMI160_LOW_G_HYST_MASK /;"	d
BMI160_LOW_G_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_LOW_G_INT_EN_MASK /;"	d
BMI160_LOW_G_LOW_MODE_MASK	bmi160_defs.h	/^#define BMI160_LOW_G_LOW_MODE_MASK /;"	d
BMI160_LOW_HIGH_SRC_INT_MASK	bmi160_defs.h	/^#define BMI160_LOW_HIGH_SRC_INT_MASK /;"	d
BMI160_MAG_POWER_MODE_MSK	bmi160_defs.h	/^#define BMI160_MAG_POWER_MODE_MSK /;"	d
BMI160_MANUAL_MODE_EN_MSK	bmi160_defs.h	/^#define BMI160_MANUAL_MODE_EN_MSK /;"	d
BMI160_MANUAL_MODE_EN_POS	bmi160_defs.h	/^#define BMI160_MANUAL_MODE_EN_POS /;"	d
BMI160_MOTION_SRC_INT_MASK	bmi160_defs.h	/^#define BMI160_MOTION_SRC_INT_MASK /;"	d
BMI160_NO_MOTION_INT_DUR_MASK	bmi160_defs.h	/^#define BMI160_NO_MOTION_INT_DUR_MASK /;"	d
BMI160_NO_MOTION_SEL_BIT_MASK	bmi160_defs.h	/^#define BMI160_NO_MOTION_SEL_BIT_MASK /;"	d
BMI160_NO_MOTION_X_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_NO_MOTION_X_INT_EN_MASK /;"	d
BMI160_NO_MOTION_Y_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_NO_MOTION_Y_INT_EN_MASK /;"	d
BMI160_NO_MOTION_Z_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_NO_MOTION_Z_INT_EN_MASK /;"	d
BMI160_NVM_BACKUP_EN	bmi160_defs.h	/^#define BMI160_NVM_BACKUP_EN /;"	d
BMI160_NVM_STATUS_MSK	bmi160_defs.h	/^#define BMI160_NVM_STATUS_MSK /;"	d
BMI160_NVM_STATUS_POS	bmi160_defs.h	/^#define BMI160_NVM_STATUS_POS /;"	d
BMI160_NVM_UPDATE_MSK	bmi160_defs.h	/^#define BMI160_NVM_UPDATE_MSK /;"	d
BMI160_NVM_UPDATE_POS	bmi160_defs.h	/^#define BMI160_NVM_UPDATE_POS /;"	d
BMI160_OFFSET_ADDR	bmi160_defs.h	/^#define BMI160_OFFSET_ADDR /;"	d
BMI160_OFFSET_CONF_ADDR	bmi160_defs.h	/^#define BMI160_OFFSET_CONF_ADDR /;"	d
BMI160_OK	bmi160_defs.h	/^#define BMI160_OK /;"	d
BMI160_ONE	bmi160_defs.h	/^#define BMI160_ONE /;"	d
BMI160_ONE_MS_DELAY	bmi160_defs.h	/^#define BMI160_ONE_MS_DELAY /;"	d
BMI160_ORIENT_BLOCK_MASK	bmi160_defs.h	/^#define BMI160_ORIENT_BLOCK_MASK /;"	d
BMI160_ORIENT_HYST_MASK	bmi160_defs.h	/^#define BMI160_ORIENT_HYST_MASK /;"	d
BMI160_ORIENT_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_ORIENT_INT_EN_MASK /;"	d
BMI160_ORIENT_MODE_MASK	bmi160_defs.h	/^#define BMI160_ORIENT_MODE_MASK /;"	d
BMI160_ORIENT_THETA_MASK	bmi160_defs.h	/^#define BMI160_ORIENT_THETA_MASK /;"	d
BMI160_ORIENT_UD_ENABLE	bmi160_defs.h	/^#define BMI160_ORIENT_UD_ENABLE /;"	d
BMI160_PMU_STATUS_ADDR	bmi160_defs.h	/^#define BMI160_PMU_STATUS_ADDR /;"	d
BMI160_READ_WRITE_LENGHT_INVALID	bmi160_defs.h	/^#define BMI160_READ_WRITE_LENGHT_INVALID /;"	d
BMI160_SELF_TEST_ADDR	bmi160_defs.h	/^#define BMI160_SELF_TEST_ADDR /;"	d
BMI160_SENSOR_TIME_LENGTH	bmi160_defs.h	/^#define BMI160_SENSOR_TIME_LENGTH /;"	d
BMI160_SENSOR_TIME_LSB_BYTE	bmi160_defs.h	/^#define BMI160_SENSOR_TIME_LSB_BYTE /;"	d
BMI160_SENSOR_TIME_MSB_BYTE	bmi160_defs.h	/^#define BMI160_SENSOR_TIME_MSB_BYTE /;"	d
BMI160_SENSOR_TIME_XLSB_BYTE	bmi160_defs.h	/^#define BMI160_SENSOR_TIME_XLSB_BYTE /;"	d
BMI160_SEN_SEL_MASK	bmi160_defs.h	/^#define BMI160_SEN_SEL_MASK /;"	d
BMI160_SET_BITS	bmi160_defs.h	/^#define BMI160_SET_BITS(/;"	d
BMI160_SET_BITS_POS_0	bmi160_defs.h	/^#define BMI160_SET_BITS_POS_0(/;"	d
BMI160_SET_HIGH_BYTE	bmi160_defs.h	/^#define BMI160_SET_HIGH_BYTE /;"	d
BMI160_SET_LOW_BYTE	bmi160_defs.h	/^#define BMI160_SET_LOW_BYTE /;"	d
BMI160_SHUTTLE_ID	examples/read_chip_id/read_chip_id.c	/^#define BMI160_SHUTTLE_ID /;"	d	file:
BMI160_SIG_MOTION_ENABLED	bmi160_defs.h	/^    BMI160_SIG_MOTION_ENABLED$/;"	e	enum:bmi160_any_sig_motion_active_interrupt_state
BMI160_SIG_MOTION_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_SIG_MOTION_INT_EN_MASK /;"	d
BMI160_SIG_MOTION_PROOF_MASK	bmi160_defs.h	/^#define BMI160_SIG_MOTION_PROOF_MASK /;"	d
BMI160_SIG_MOTION_SEL_MASK	bmi160_defs.h	/^#define BMI160_SIG_MOTION_SEL_MASK /;"	d
BMI160_SIG_MOTION_SKIP_MASK	bmi160_defs.h	/^#define BMI160_SIG_MOTION_SKIP_MASK /;"	d
BMI160_SINGLE_TAP_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_SINGLE_TAP_INT_EN_MASK /;"	d
BMI160_SLOPE_INT_DUR_MASK	bmi160_defs.h	/^#define BMI160_SLOPE_INT_DUR_MASK /;"	d
BMI160_SOFT_RESET_CMD	bmi160_defs.h	/^#define BMI160_SOFT_RESET_CMD /;"	d
BMI160_SOFT_RESET_DELAY_MS	bmi160_defs.h	/^#define BMI160_SOFT_RESET_DELAY_MS /;"	d
BMI160_SPI_COMM_TEST_ADDR	bmi160_defs.h	/^#define BMI160_SPI_COMM_TEST_ADDR /;"	d
BMI160_SPI_INTF	bmi160_defs.h	/^#define BMI160_SPI_INTF /;"	d
BMI160_SPI_RD_MASK	bmi160_defs.h	/^#define BMI160_SPI_RD_MASK /;"	d
BMI160_SPI_WR_MASK	bmi160_defs.h	/^#define BMI160_SPI_WR_MASK /;"	d
BMI160_START_FOC_CMD	bmi160_defs.h	/^#define BMI160_START_FOC_CMD /;"	d
BMI160_STATUS_ADDR	bmi160_defs.h	/^#define BMI160_STATUS_ADDR /;"	d
BMI160_STEP_COUNT_EN_BIT_MASK	bmi160_defs.h	/^#define BMI160_STEP_COUNT_EN_BIT_MASK /;"	d
BMI160_STEP_DETECT_EN_MASK	bmi160_defs.h	/^#define BMI160_STEP_DETECT_EN_MASK /;"	d
BMI160_STEP_DETECT_INT	bmi160_defs.h	/^    BMI160_STEP_DETECT_INT,$/;"	e	enum:bmi160_int_types
BMI160_STEP_DETECT_INT_EN_MASK	bmi160_defs.h	/^#define BMI160_STEP_DETECT_INT_EN_MASK /;"	d
BMI160_STEP_DETECT_MIN_THRES_MASK	bmi160_defs.h	/^#define BMI160_STEP_DETECT_MIN_THRES_MASK /;"	d
BMI160_STEP_DETECT_NORMAL	bmi160_defs.h	/^    BMI160_STEP_DETECT_NORMAL,$/;"	e	enum:bmi160_step_detect_mode
BMI160_STEP_DETECT_ROBUST	bmi160_defs.h	/^    BMI160_STEP_DETECT_ROBUST,$/;"	e	enum:bmi160_step_detect_mode
BMI160_STEP_DETECT_SENSITIVE	bmi160_defs.h	/^    BMI160_STEP_DETECT_SENSITIVE,$/;"	e	enum:bmi160_step_detect_mode
BMI160_STEP_DETECT_STEPTIME_MIN_MASK	bmi160_defs.h	/^#define BMI160_STEP_DETECT_STEPTIME_MIN_MASK /;"	d
BMI160_STEP_DETECT_USER_DEFINE	bmi160_defs.h	/^    BMI160_STEP_DETECT_USER_DEFINE$/;"	e	enum:bmi160_step_detect_mode
BMI160_STEP_MIN_BUF_MASK	bmi160_defs.h	/^#define BMI160_STEP_MIN_BUF_MASK /;"	d
BMI160_TAP_DUR_MASK	bmi160_defs.h	/^#define BMI160_TAP_DUR_MASK /;"	d
BMI160_TAP_QUIET_DUR_MASK	bmi160_defs.h	/^#define BMI160_TAP_QUIET_DUR_MASK /;"	d
BMI160_TAP_SHOCK_DUR_MASK	bmi160_defs.h	/^#define BMI160_TAP_SHOCK_DUR_MASK /;"	d
BMI160_TAP_SRC_INT_MASK	bmi160_defs.h	/^#define BMI160_TAP_SRC_INT_MASK /;"	d
BMI160_TAP_THRES_MASK	bmi160_defs.h	/^#define BMI160_TAP_THRES_MASK /;"	d
BMI160_THREE	bmi160_defs.h	/^#define BMI160_THREE /;"	d
BMI160_TIME_SEL	bmi160_defs.h	/^#define BMI160_TIME_SEL /;"	d
BMI160_TWO	bmi160_defs.h	/^#define BMI160_TWO /;"	d
BMI160_W_ACCEl_SELF_TEST_FAIL	bmi160_defs.h	/^#define BMI160_W_ACCEl_SELF_TEST_FAIL /;"	d
BMI160_W_GYRO_SELF_TEST_FAIL	bmi160_defs.h	/^#define BMI160_W_GYRO_SELF_TEST_FAIL /;"	d
CFLAGS	examples/read_sensor_data/Makefile	/^CFLAGS	?= -Wall -O3$/;"	m
CFLAGS	examples/tap/Makefile	/^CFLAGS	?= -Wall -O3$/;"	m
COINES_INSTALL_PATH	examples/read_chip_id/Makefile	/^COINES_INSTALL_PATH ?= ..\/..\/..\/..$/;"	m
EXAMPLE_FILE	examples/read_chip_id/Makefile	/^EXAMPLE_FILE ?= read_chip_id.c$/;"	m
EXAMPLE_FILE	examples/read_sensor_data/Makefile	/^EXAMPLE_FILE ?= read_sensor_data.c$/;"	m
EXAMPLE_FILE	examples/tap/Makefile	/^EXAMPLE_FILE ?= tap.c$/;"	m
FIFO_CONFIG_LSB_CHECK	bmi160_defs.h	/^#define FIFO_CONFIG_LSB_CHECK /;"	d
FIFO_CONFIG_MSB_CHECK	bmi160_defs.h	/^#define FIFO_CONFIG_MSB_CHECK /;"	d
INT16_C	bmi160_defs.h	/^#define INT16_C(/;"	d
INT32_C	bmi160_defs.h	/^#define INT32_C(/;"	d
INT64_C	bmi160_defs.h	/^#define INT64_C(/;"	d
INT8_C	bmi160_defs.h	/^#define INT8_C(/;"	d
LITTLE_ENDIAN	bmi160_defs.h	/^#define LITTLE_ENDIAN /;"	d
NULL	bmi160_defs.h	/^#define NULL /;"	d
OBJS	examples/read_sensor_data/Makefile	/^OBJS := $(C_SRCS:%=%.o)$/;"	m
OBJS	examples/tap/Makefile	/^OBJS := $(C_SRCS:%=%.o)$/;"	m
TARGET_EXEC	examples/read_sensor_data/Makefile	/^TARGET_EXEC ?= read_sensor$/;"	m
TARGET_EXEC	examples/tap/Makefile	/^TARGET_EXEC ?= tap_sensor$/;"	m
UINT16_C	bmi160_defs.h	/^#define UINT16_C(/;"	d
UINT32_C	bmi160_defs.h	/^#define UINT32_C(/;"	d
UINT64_C	bmi160_defs.h	/^#define UINT64_C(/;"	d
UINT8_C	bmi160_defs.h	/^#define UINT8_C(/;"	d
acc_any_motion_int	bmi160_defs.h	/^    struct bmi160_acc_any_mot_int_cfg acc_any_motion_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_any_mot_int_cfg
acc_flat_int	bmi160_defs.h	/^    struct bmi160_acc_flat_detect_int_cfg acc_flat_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_flat_detect_int_cfg
acc_high_g_int	bmi160_defs.h	/^    struct bmi160_acc_high_g_int_cfg acc_high_g_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_high_g_int_cfg
acc_low_g_int	bmi160_defs.h	/^    struct bmi160_acc_low_g_int_cfg acc_low_g_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_low_g_int_cfg
acc_no_motion_int	bmi160_defs.h	/^    struct bmi160_acc_no_motion_int_cfg acc_no_motion_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_no_motion_int_cfg
acc_off_en	bmi160_defs.h	/^    uint8_t acc_off_en;$/;"	m	struct:bmi160_foc_conf	typeref:typename:uint8_t
acc_orient_int	bmi160_defs.h	/^    struct bmi160_acc_orient_int_cfg acc_orient_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_orient_int_cfg
acc_sig_motion_int	bmi160_defs.h	/^    struct bmi160_acc_sig_mot_int_cfg acc_sig_motion_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_sig_mot_int_cfg
acc_step_detect_int	bmi160_defs.h	/^    struct bmi160_acc_step_detect_int_cfg acc_step_detect_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_step_detect_int_cfg
acc_tap_int	bmi160_defs.h	/^    struct bmi160_acc_tap_int_cfg acc_tap_int;$/;"	m	union:bmi160_int_type_cfg	typeref:struct:bmi160_acc_tap_int_cfg
accel_byte_start_idx	bmi160_defs.h	/^    uint16_t accel_byte_start_idx;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint16_t
accel_cfg	bmi160_defs.h	/^    struct bmi160_cfg accel_cfg;$/;"	m	struct:bmi160_dev	typeref:struct:bmi160_cfg
accel_pmu_status	bmi160_defs.h	/^    uint8_t accel_pmu_status;$/;"	m	struct:bmi160_pmu_status	typeref:typename:uint8_t
accel_self_test_negative_excitation	bmi160.c	/^static int8_t accel_self_test_negative_excitation(struct bmi160_sensor_data *accel_neg, const st/;"	f	typeref:typename:int8_t	file:
accel_self_test_positive_excitation	bmi160.c	/^static int8_t accel_self_test_positive_excitation(struct bmi160_sensor_data *accel_pos, const st/;"	f	typeref:typename:int8_t	file:
any_sig_sel	bmi160_defs.h	/^    enum bmi160_any_sig_motion_active_interrupt_state any_sig_sel;$/;"	m	struct:bmi160_dev	typeref:enum:bmi160_any_sig_motion_active_interrupt_state
anym	bmi160_defs.h	/^    uint32_t anym : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
anym_first_x	bmi160_defs.h	/^    uint32_t anym_first_x : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
anym_first_y	bmi160_defs.h	/^    uint32_t anym_first_y : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
anym_first_z	bmi160_defs.h	/^    uint32_t anym_first_z : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
anym_sign	bmi160_defs.h	/^    uint32_t anym_sign : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
anymotion_data_src	bmi160_defs.h	/^    uint8_t anymotion_data_src : 1;$/;"	m	struct:bmi160_acc_any_mot_int_cfg	typeref:typename:uint8_t:1
anymotion_dur	bmi160_defs.h	/^    uint8_t anymotion_dur : 2;$/;"	m	struct:bmi160_acc_any_mot_int_cfg	typeref:typename:uint8_t:2
anymotion_en	bmi160_defs.h	/^    uint8_t anymotion_en : 1;$/;"	m	struct:bmi160_acc_any_mot_int_cfg	typeref:typename:uint8_t:1
anymotion_thr	bmi160_defs.h	/^    uint8_t anymotion_thr;$/;"	m	struct:bmi160_acc_any_mot_int_cfg	typeref:typename:uint8_t
anymotion_x	bmi160_defs.h	/^    uint8_t anymotion_x : 1;$/;"	m	struct:bmi160_acc_any_mot_int_cfg	typeref:typename:uint8_t:1
anymotion_y	bmi160_defs.h	/^    uint8_t anymotion_y : 1;$/;"	m	struct:bmi160_acc_any_mot_int_cfg	typeref:typename:uint8_t:1
anymotion_z	bmi160_defs.h	/^    uint8_t anymotion_z : 1;$/;"	m	struct:bmi160_acc_any_mot_int_cfg	typeref:typename:uint8_t:1
aux_byte_start_idx	bmi160_defs.h	/^    uint16_t aux_byte_start_idx;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint16_t
aux_cfg	bmi160_defs.h	/^    struct bmi160_aux_cfg aux_cfg;$/;"	m	struct:bmi160_dev	typeref:struct:bmi160_aux_cfg
aux_i2c_addr	bmi160_defs.h	/^    uint8_t aux_i2c_addr;$/;"	m	struct:bmi160_aux_cfg	typeref:typename:uint8_t
aux_odr	bmi160_defs.h	/^    uint8_t aux_odr : 4;$/;"	m	struct:bmi160_aux_cfg	typeref:typename:uint8_t:4
aux_pmu_status	bmi160_defs.h	/^    uint8_t aux_pmu_status;$/;"	m	struct:bmi160_pmu_status	typeref:typename:uint8_t
aux_r_y2_lsb	bmi160_defs.h	/^    uint8_t aux_r_y2_lsb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
aux_r_y2_msb	bmi160_defs.h	/^    uint8_t aux_r_y2_msb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
aux_rd_burst_len	bmi160_defs.h	/^    uint8_t aux_rd_burst_len : 2;$/;"	m	struct:bmi160_aux_cfg	typeref:typename:uint8_t:2
aux_sensor_enable	bmi160_defs.h	/^    uint8_t aux_sensor_enable : 1;$/;"	m	struct:bmi160_aux_cfg	typeref:typename:uint8_t:1
aux_x_lsb	bmi160_defs.h	/^    uint8_t aux_x_lsb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
aux_x_msb	bmi160_defs.h	/^    uint8_t aux_x_msb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
aux_y_lsb	bmi160_defs.h	/^    uint8_t aux_y_lsb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
aux_y_msb	bmi160_defs.h	/^    uint8_t aux_y_msb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
aux_z_lsb	bmi160_defs.h	/^    uint8_t aux_z_lsb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
aux_z_msb	bmi160_defs.h	/^    uint8_t aux_z_msb;$/;"	m	struct:bmi160_aux_fifo_data	typeref:typename:uint8_t
axes_ex	bmi160_defs.h	/^    uint16_t axes_ex : 1;$/;"	m	struct:bmi160_acc_orient_int_cfg	typeref:typename:uint16_t:1
bit	bmi160_defs.h	/^    struct bmi160_int_status_bits bit;$/;"	m	union:bmi160_int_status	typeref:struct:bmi160_int_status_bits
bmi160_acc_any_mot_int_cfg	bmi160_defs.h	/^struct bmi160_acc_any_mot_int_cfg$/;"	s
bmi160_acc_flat_detect_int_cfg	bmi160_defs.h	/^struct bmi160_acc_flat_detect_int_cfg$/;"	s
bmi160_acc_high_g_int_cfg	bmi160_defs.h	/^struct bmi160_acc_high_g_int_cfg$/;"	s
bmi160_acc_low_g_int_cfg	bmi160_defs.h	/^struct bmi160_acc_low_g_int_cfg$/;"	s
bmi160_acc_no_motion_int_cfg	bmi160_defs.h	/^struct bmi160_acc_no_motion_int_cfg$/;"	s
bmi160_acc_orient_int_cfg	bmi160_defs.h	/^struct bmi160_acc_orient_int_cfg$/;"	s
bmi160_acc_sig_mot_int_cfg	bmi160_defs.h	/^struct bmi160_acc_sig_mot_int_cfg$/;"	s
bmi160_acc_step_detect_int_cfg	bmi160_defs.h	/^struct bmi160_acc_step_detect_int_cfg$/;"	s
bmi160_acc_tap_int_cfg	bmi160_defs.h	/^struct bmi160_acc_tap_int_cfg$/;"	s
bmi160_accel	examples/read_chip_id/read_chip_id.c	/^struct bmi160_sensor_data bmi160_accel;$/;"	v	typeref:struct:bmi160_sensor_data
bmi160_any_sig_motion_active_interrupt_state	bmi160_defs.h	/^enum bmi160_any_sig_motion_active_interrupt_state {$/;"	g
bmi160_aux_cfg	bmi160_defs.h	/^struct bmi160_aux_cfg$/;"	s
bmi160_aux_data	bmi160_defs.h	/^struct bmi160_aux_data$/;"	s
bmi160_aux_fifo_data	bmi160_defs.h	/^struct bmi160_aux_fifo_data$/;"	s
bmi160_aux_init	bmi160.c	/^int8_t bmi160_aux_init(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_aux_read	bmi160.c	/^int8_t bmi160_aux_read(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_de/;"	f	typeref:typename:int8_t
bmi160_aux_read_len	bmi160_defs.h	/^enum bmi160_aux_read_len {$/;"	g
bmi160_aux_write	bmi160.c	/^int8_t bmi160_aux_write(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_d/;"	f	typeref:typename:int8_t
bmi160_cfg	bmi160_defs.h	/^struct bmi160_cfg$/;"	s
bmi160_config_aux_mode	bmi160.c	/^int8_t bmi160_config_aux_mode(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_delay_fptr_t	bmi160_defs.h	/^typedef void (*bmi160_delay_fptr_t)(uint32_t period);$/;"	t	typeref:typename:void (*)(uint32_t period)
bmi160_dev	bmi160_defs.h	/^struct bmi160_dev$/;"	s
bmi160_extract_accel	bmi160.c	/^int8_t bmi160_extract_accel(struct bmi160_sensor_data *accel_data, uint8_t *accel_length, struct/;"	f	typeref:typename:int8_t
bmi160_extract_aux	bmi160.c	/^int8_t bmi160_extract_aux(struct bmi160_aux_data *aux_data, uint8_t *aux_len, struct bmi160_dev /;"	f	typeref:typename:int8_t
bmi160_extract_gyro	bmi160.c	/^int8_t bmi160_extract_gyro(struct bmi160_sensor_data *gyro_data, uint8_t *gyro_length, struct bm/;"	f	typeref:typename:int8_t
bmi160_fifo_frame	bmi160_defs.h	/^struct bmi160_fifo_frame$/;"	s
bmi160_foc_conf	bmi160_defs.h	/^struct bmi160_foc_conf$/;"	s
bmi160_get_fifo_data	bmi160.c	/^int8_t bmi160_get_fifo_data(struct bmi160_dev const *dev)$/;"	f	typeref:typename:int8_t
bmi160_get_int_status	bmi160.c	/^int8_t bmi160_get_int_status(enum bmi160_int_status_sel int_status_sel,$/;"	f	typeref:typename:int8_t
bmi160_get_offsets	bmi160.c	/^int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_get_power_mode	bmi160.c	/^int8_t bmi160_get_power_mode(struct bmi160_pmu_status *pmu_status, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_get_regs	bmi160.c	/^int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *d/;"	f	typeref:typename:int8_t
bmi160_get_sens_conf	bmi160.c	/^int8_t bmi160_get_sens_conf(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_get_sensor_data	bmi160.c	/^int8_t bmi160_get_sensor_data(uint8_t select_sensor,$/;"	f	typeref:typename:int8_t
bmi160_gyro	examples/read_chip_id/read_chip_id.c	/^struct bmi160_sensor_data bmi160_gyro;$/;"	v	typeref:struct:bmi160_sensor_data
bmi160_init	bmi160.c	/^int8_t bmi160_init(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_int_channel	bmi160_defs.h	/^enum bmi160_int_channel {$/;"	g
bmi160_int_pin_settg	bmi160_defs.h	/^struct bmi160_int_pin_settg$/;"	s
bmi160_int_settg	bmi160_defs.h	/^struct bmi160_int_settg$/;"	s
bmi160_int_status	bmi160_defs.h	/^union bmi160_int_status$/;"	u
bmi160_int_status_bits	bmi160_defs.h	/^struct bmi160_int_status_bits$/;"	s
bmi160_int_status_sel	bmi160_defs.h	/^enum bmi160_int_status_sel {$/;"	g
bmi160_int_type_cfg	bmi160_defs.h	/^union bmi160_int_type_cfg$/;"	u
bmi160_int_types	bmi160_defs.h	/^enum bmi160_int_types {$/;"	g
bmi160_offsets	bmi160_defs.h	/^struct bmi160_offsets$/;"	s
bmi160_perform_self_test	bmi160.c	/^int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_pmu_status	bmi160_defs.h	/^struct bmi160_pmu_status$/;"	s
bmi160_read_aux_data_auto_mode	bmi160.c	/^int8_t bmi160_read_aux_data_auto_mode(uint8_t *aux_data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_read_fptr_t	bmi160_defs.h	/^typedef int8_t (*bmi160_read_fptr_t)(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t/;"	t	typeref:typename:int8_t (*)(uint8_t dev_addr,uint8_t reg_addr,uint8_t * data,uint16_t len)
bmi160_read_step_counter	bmi160.c	/^int8_t bmi160_read_step_counter(uint16_t *step_val, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_select_sensor	bmi160_defs.h	/^enum bmi160_select_sensor {$/;"	g
bmi160_sensor_data	bmi160_defs.h	/^struct bmi160_sensor_data$/;"	s
bmi160_set_aux_auto_mode	bmi160.c	/^int8_t bmi160_set_aux_auto_mode(uint8_t *data_addr, struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_fifo_config	bmi160.c	/^int8_t bmi160_set_fifo_config(uint8_t config, uint8_t enable, struct bmi160_dev const *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_fifo_down	bmi160.c	/^int8_t bmi160_set_fifo_down(uint8_t fifo_down, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_fifo_flush	bmi160.c	/^int8_t bmi160_set_fifo_flush(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_fifo_wm	bmi160.c	/^int8_t bmi160_set_fifo_wm(uint8_t fifo_wm, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_int_config	bmi160.c	/^int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_offsets	bmi160.c	/^int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf,$/;"	f	typeref:typename:int8_t
bmi160_set_power_mode	bmi160.c	/^int8_t bmi160_set_power_mode(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_regs	bmi160.c	/^int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *d/;"	f	typeref:typename:int8_t
bmi160_set_sens_conf	bmi160.c	/^int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_set_step_counter	bmi160.c	/^int8_t bmi160_set_step_counter(uint8_t step_cnt_enable, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_soft_reset	bmi160.c	/^int8_t bmi160_soft_reset(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t
bmi160_start_foc	bmi160.c	/^int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,$/;"	f	typeref:typename:int8_t
bmi160_step_detect_mode	bmi160_defs.h	/^enum bmi160_step_detect_mode {$/;"	g
bmi160_update_nvm	bmi160.c	/^int8_t bmi160_update_nvm(struct bmi160_dev const *dev)$/;"	f	typeref:typename:int8_t
bmi160_write_fptr_t	bmi160_defs.h	/^typedef int8_t (*bmi160_write_fptr_t)(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, ui/;"	t	typeref:typename:int8_t (*)(uint8_t dev_addr,uint8_t reg_addr,uint8_t * read_data,uint16_t len)
bmi160dev	examples/read_chip_id/read_chip_id.c	/^struct bmi160_dev bmi160dev;$/;"	v	typeref:struct:bmi160_dev
bw	bmi160_defs.h	/^    uint8_t bw;$/;"	m	struct:bmi160_cfg	typeref:typename:uint8_t
check_accel_config	bmi160.c	/^static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
check_frame_validity	bmi160.c	/^static void check_frame_validity(uint16_t *data_index, const struct bmi160_dev *dev)$/;"	f	typeref:typename:void	file:
check_gyro_config	bmi160.c	/^static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
check_invalid_settg	bmi160.c	/^static int8_t check_invalid_settg(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
chip_id	bmi160_defs.h	/^    uint8_t chip_id;$/;"	m	struct:bmi160_dev	typeref:typename:uint8_t
clean	examples/read_sensor_data/Makefile	/^clean:$/;"	t
clean	examples/tap/Makefile	/^clean:$/;"	t
config_any_dur_threshold	bmi160.c	/^static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_c/;"	f	typeref:typename:int8_t	file:
config_any_motion_int_settg	bmi160.c	/^static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,$/;"	f	typeref:typename:int8_t	file:
config_any_motion_src	bmi160.c	/^static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,$/;"	f	typeref:typename:int8_t	file:
config_aux_odr	bmi160.c	/^static int8_t config_aux_odr(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
config_aux_settg	bmi160.c	/^static int8_t config_aux_settg(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
config_flat_int_settg	bmi160.c	/^static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const/;"	f	typeref:typename:int8_t	file:
config_high_g_data_src	bmi160.c	/^static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,$/;"	f	typeref:typename:int8_t	file:
config_high_g_int_settg	bmi160.c	/^static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,$/;"	f	typeref:typename:int8_t	file:
config_int_latch	bmi160.c	/^static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_de/;"	f	typeref:typename:int8_t	file:
config_int_out_ctrl	bmi160.c	/^static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160/;"	f	typeref:typename:int8_t	file:
config_low_g_data_src	bmi160.c	/^static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const stru/;"	f	typeref:typename:int8_t	file:
config_low_g_int_settg	bmi160.c	/^static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const str/;"	f	typeref:typename:int8_t	file:
config_no_motion_data_src	bmi160.c	/^static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cf/;"	f	typeref:typename:int8_t	file:
config_no_motion_dur_thr	bmi160.c	/^static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg/;"	f	typeref:typename:int8_t	file:
config_no_motion_int_settg	bmi160.c	/^static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,$/;"	f	typeref:typename:int8_t	file:
config_orient_int_settg	bmi160.c	/^static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,$/;"	f	typeref:typename:int8_t	file:
config_sec_if	bmi160.c	/^static int8_t config_sec_if(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
config_sig_dur_threshold	bmi160.c	/^static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,$/;"	f	typeref:typename:int8_t	file:
config_sig_motion_data_src	bmi160.c	/^static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cf/;"	f	typeref:typename:int8_t	file:
config_sig_motion_int_settg	bmi160.c	/^static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,$/;"	f	typeref:typename:int8_t	file:
config_step_detect	bmi160.c	/^static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cf/;"	f	typeref:typename:int8_t	file:
config_tap_data_src	bmi160.c	/^static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct/;"	f	typeref:typename:int8_t	file:
config_tap_int_settg	bmi160.c	/^static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,$/;"	f	typeref:typename:int8_t	file:
config_tap_param	bmi160.c	/^static int8_t config_tap_param(const struct bmi160_int_settg *int_config,$/;"	f	typeref:typename:int8_t	file:
configure_offset_enable	bmi160.c	/^static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev /;"	f	typeref:typename:int8_t	file:
d_tap	bmi160_defs.h	/^    uint32_t d_tap : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
data	bmi160_defs.h	/^    uint8_t *data;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint8_t *
data	bmi160_defs.h	/^    uint8_t data[4];$/;"	m	union:bmi160_int_status	typeref:typename:uint8_t[4]
data	bmi160_defs.h	/^    uint8_t data[8];$/;"	m	struct:bmi160_aux_data	typeref:typename:uint8_t[8]
default_param_settg	bmi160.c	/^static void default_param_settg(struct bmi160_dev *dev)$/;"	f	typeref:typename:void	file:
delay_ms	bmi160_defs.h	/^    bmi160_delay_fptr_t delay_ms;$/;"	m	struct:bmi160_dev	typeref:typename:bmi160_delay_fptr_t
diff	examples/tap/tap.c	/^struct timespec diff(struct timespec start, struct timespec end) {$/;"	f	typeref:struct:timespec
disable_sig_motion_int	bmi160.c	/^static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
drdy	bmi160_defs.h	/^    uint32_t drdy : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
edge_ctrl	bmi160_defs.h	/^    uint16_t edge_ctrl : 1;$/;"	m	struct:bmi160_int_pin_settg	typeref:typename:uint16_t:1
enable_accel_any_motion_int	bmi160.c	/^static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_in/;"	f	typeref:typename:int8_t	file:
enable_accel_self_test	bmi160.c	/^static int8_t enable_accel_self_test(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
enable_data_ready_int	bmi160.c	/^static int8_t enable_data_ready_int(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
enable_fifo_full_int	bmi160.c	/^static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi16/;"	f	typeref:typename:int8_t	file:
enable_fifo_wtm_int	bmi160.c	/^static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160/;"	f	typeref:typename:int8_t	file:
enable_flat_int	bmi160.c	/^static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struc/;"	f	typeref:typename:int8_t	file:
enable_gyro_self_test	bmi160.c	/^static int8_t enable_gyro_self_test(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
enable_high_g_int	bmi160.c	/^static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const st/;"	f	typeref:typename:int8_t	file:
enable_low_g_int	bmi160.c	/^static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bm/;"	f	typeref:typename:int8_t	file:
enable_no_motion_int	bmi160.c	/^static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,$/;"	f	typeref:typename:int8_t	file:
enable_orient_int	bmi160.c	/^static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const st/;"	f	typeref:typename:int8_t	file:
enable_sig_motion_int	bmi160.c	/^static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, st/;"	f	typeref:typename:int8_t	file:
enable_step_detect_int	bmi160.c	/^static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_in/;"	f	typeref:typename:int8_t	file:
enable_tap_int	bmi160.c	/^static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,$/;"	f	typeref:typename:int8_t	file:
extract_accel_header_mode	bmi160.c	/^static void extract_accel_header_mode(struct bmi160_sensor_data *accel_data,$/;"	f	typeref:typename:void	file:
extract_aux_header_mode	bmi160.c	/^static void extract_aux_header_mode(struct bmi160_aux_data *aux_data, uint8_t *aux_length, const/;"	f	typeref:typename:void	file:
extract_aux_read	bmi160.c	/^static int8_t extract_aux_read(uint16_t map_len,$/;"	f	typeref:typename:int8_t	file:
extract_gyro_header_mode	bmi160.c	/^static void extract_gyro_header_mode(struct bmi160_sensor_data *gyro_data,$/;"	f	typeref:typename:void	file:
ffull	bmi160_defs.h	/^    uint32_t ffull : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
fifo	bmi160_defs.h	/^    struct bmi160_fifo_frame *fifo;$/;"	m	struct:bmi160_dev	typeref:struct:bmi160_fifo_frame *
fifo_data_enable	bmi160_defs.h	/^    uint8_t fifo_data_enable;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint8_t
fifo_full_int_en	bmi160_defs.h	/^    uint8_t fifo_full_int_en : 1;$/;"	m	struct:bmi160_int_settg	typeref:typename:uint8_t:1
fifo_header_enable	bmi160_defs.h	/^    uint8_t fifo_header_enable;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint8_t
fifo_time_enable	bmi160_defs.h	/^    uint8_t fifo_time_enable;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint8_t
fifo_wtm_int_en	bmi160_defs.h	/^    uint8_t fifo_wtm_int_en : 1;$/;"	m	struct:bmi160_int_settg	typeref:typename:uint8_t:1
flat	bmi160_defs.h	/^    uint32_t flat : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
flat_en	bmi160_defs.h	/^    uint16_t flat_en : 1;$/;"	m	struct:bmi160_acc_flat_detect_int_cfg	typeref:typename:uint16_t:1
flat_hold_time	bmi160_defs.h	/^    uint16_t flat_hold_time : 2;$/;"	m	struct:bmi160_acc_flat_detect_int_cfg	typeref:typename:uint16_t:2
flat_hy	bmi160_defs.h	/^    uint16_t flat_hy : 3;$/;"	m	struct:bmi160_acc_flat_detect_int_cfg	typeref:typename:uint16_t:3
flat_int	bmi160_defs.h	/^    uint32_t flat_int : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
flat_theta	bmi160_defs.h	/^    uint16_t flat_theta : 6;$/;"	m	struct:bmi160_acc_flat_detect_int_cfg	typeref:typename:uint16_t:6
foc_acc_x	bmi160_defs.h	/^    uint8_t foc_acc_x;$/;"	m	struct:bmi160_foc_conf	typeref:typename:uint8_t
foc_acc_y	bmi160_defs.h	/^    uint8_t foc_acc_y;$/;"	m	struct:bmi160_foc_conf	typeref:typename:uint8_t
foc_acc_z	bmi160_defs.h	/^    uint8_t foc_acc_z;$/;"	m	struct:bmi160_foc_conf	typeref:typename:uint8_t
foc_gyr_en	bmi160_defs.h	/^    uint8_t foc_gyr_en;$/;"	m	struct:bmi160_foc_conf	typeref:typename:uint8_t
fwm	bmi160_defs.h	/^    uint32_t fwm : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
get_accel_conf	bmi160.c	/^static int8_t get_accel_conf(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
get_accel_data	bmi160.c	/^static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_/;"	f	typeref:typename:int8_t	file:
get_accel_gyro_data	bmi160.c	/^static int8_t get_accel_gyro_data(uint8_t len,$/;"	f	typeref:typename:int8_t	file:
get_accel_len_to_parse	bmi160.c	/^static void get_accel_len_to_parse(uint16_t *data_index,$/;"	f	typeref:typename:void	file:
get_aux_len_to_parse	bmi160.c	/^static void get_aux_len_to_parse(uint16_t *data_index,$/;"	f	typeref:typename:void	file:
get_fifo_byte_counter	bmi160.c	/^static int8_t get_fifo_byte_counter(uint16_t *bytes_to_read, struct bmi160_dev const *dev)$/;"	f	typeref:typename:int8_t	file:
get_foc_status	bmi160.c	/^static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)$/;"	f	typeref:typename:int8_t	file:
get_gyro_conf	bmi160.c	/^static int8_t get_gyro_conf(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
get_gyro_data	bmi160.c	/^static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_de/;"	f	typeref:typename:int8_t	file:
get_gyro_len_to_parse	bmi160.c	/^static void get_gyro_len_to_parse(uint16_t *data_index,$/;"	f	typeref:typename:void	file:
gyro_byte_start_idx	bmi160_defs.h	/^    uint16_t gyro_byte_start_idx;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint16_t
gyro_cfg	bmi160_defs.h	/^    struct bmi160_cfg gyro_cfg;$/;"	m	struct:bmi160_dev	typeref:struct:bmi160_cfg
gyro_off_en	bmi160_defs.h	/^    uint8_t gyro_off_en;$/;"	m	struct:bmi160_foc_conf	typeref:typename:uint8_t
gyro_pmu_status	bmi160_defs.h	/^    uint8_t gyro_pmu_status;$/;"	m	struct:bmi160_pmu_status	typeref:typename:uint8_t
high_data_src	bmi160_defs.h	/^    uint8_t high_data_src : 1;$/;"	m	struct:bmi160_acc_high_g_int_cfg	typeref:typename:uint8_t:1
high_dur	bmi160_defs.h	/^    uint8_t high_dur;$/;"	m	struct:bmi160_acc_high_g_int_cfg	typeref:typename:uint8_t
high_first_x	bmi160_defs.h	/^    uint32_t high_first_x : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
high_first_y	bmi160_defs.h	/^    uint32_t high_first_y : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
high_first_z	bmi160_defs.h	/^    uint32_t high_first_z : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
high_g	bmi160_defs.h	/^    uint32_t high_g : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
high_g_x	bmi160_defs.h	/^    uint8_t high_g_x : 1;$/;"	m	struct:bmi160_acc_high_g_int_cfg	typeref:typename:uint8_t:1
high_g_y	bmi160_defs.h	/^    uint8_t high_g_y : 1;$/;"	m	struct:bmi160_acc_high_g_int_cfg	typeref:typename:uint8_t:1
high_g_z	bmi160_defs.h	/^    uint8_t high_g_z : 1;$/;"	m	struct:bmi160_acc_high_g_int_cfg	typeref:typename:uint8_t:1
high_hy	bmi160_defs.h	/^    uint8_t high_hy : 2;$/;"	m	struct:bmi160_acc_high_g_int_cfg	typeref:typename:uint8_t:2
high_sign	bmi160_defs.h	/^    uint32_t high_sign : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
high_thres	bmi160_defs.h	/^    uint8_t high_thres;$/;"	m	struct:bmi160_acc_high_g_int_cfg	typeref:typename:uint8_t
id	bmi160_defs.h	/^    uint8_t id;$/;"	m	struct:bmi160_dev	typeref:typename:uint8_t
init_bmi160	examples/read_chip_id/read_chip_id.c	/^static void init_bmi160(void)$/;"	f	typeref:typename:void	file:
init_bmi160	osp_bmi160.c	/^int8_t init_bmi160(struct bmi160_dev *bmi160dev, const char *name) {$/;"	f	typeref:typename:int8_t
init_bmi160_sensor_driver_interface	examples/read_chip_id/read_chip_id.c	/^static void init_bmi160_sensor_driver_interface(void)$/;"	f	typeref:typename:void	file:
init_sensor_interface	examples/read_chip_id/read_chip_id.c	/^static void init_sensor_interface(void)$/;"	f	typeref:typename:void	file:
input_en	bmi160_defs.h	/^    uint16_t input_en : 1;$/;"	m	struct:bmi160_int_pin_settg	typeref:typename:uint16_t:1
int_channel	bmi160_defs.h	/^    enum bmi160_int_channel int_channel;$/;"	m	struct:bmi160_int_settg	typeref:enum:bmi160_int_channel
int_mask_lookup_table	bmi160.c	/^const uint8_t int_mask_lookup_table[13] = {$/;"	v	typeref:typename:const uint8_t[13]
int_pin_settg	bmi160_defs.h	/^    struct bmi160_int_pin_settg int_pin_settg;$/;"	m	struct:bmi160_int_settg	typeref:struct:bmi160_int_pin_settg
int_type	bmi160_defs.h	/^    enum bmi160_int_types int_type;$/;"	m	struct:bmi160_int_settg	typeref:enum:bmi160_int_types
int_type_cfg	bmi160_defs.h	/^    union bmi160_int_type_cfg int_type_cfg;$/;"	m	struct:bmi160_int_settg	typeref:union:bmi160_int_type_cfg
intf	bmi160_defs.h	/^    uint8_t intf;$/;"	m	struct:bmi160_dev	typeref:typename:uint8_t
latch_dur	bmi160_defs.h	/^    uint16_t latch_dur : 4;$/;"	m	struct:bmi160_int_pin_settg	typeref:typename:uint16_t:4
length	bmi160_defs.h	/^    uint16_t length;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint16_t
low_data_src	bmi160_defs.h	/^    uint8_t low_data_src : 1;$/;"	m	struct:bmi160_acc_low_g_int_cfg	typeref:typename:uint8_t:1
low_dur	bmi160_defs.h	/^    uint8_t low_dur;$/;"	m	struct:bmi160_acc_low_g_int_cfg	typeref:typename:uint8_t
low_en	bmi160_defs.h	/^    uint8_t low_en : 1;$/;"	m	struct:bmi160_acc_low_g_int_cfg	typeref:typename:uint8_t:1
low_g	bmi160_defs.h	/^    uint32_t low_g : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
low_hyst	bmi160_defs.h	/^    uint8_t low_hyst : 2;$/;"	m	struct:bmi160_acc_low_g_int_cfg	typeref:typename:uint8_t:2
low_mode	bmi160_defs.h	/^    uint8_t low_mode : 1;$/;"	m	struct:bmi160_acc_low_g_int_cfg	typeref:typename:uint8_t:1
low_thres	bmi160_defs.h	/^    uint8_t low_thres;$/;"	m	struct:bmi160_acc_low_g_int_cfg	typeref:typename:uint8_t
main	examples/read_chip_id/read_chip_id.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	examples/read_sensor_data/read_sensor_data.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	examples/tap/tap.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
manual_enable	bmi160_defs.h	/^    uint8_t manual_enable : 1;$/;"	m	struct:bmi160_aux_cfg	typeref:typename:uint8_t:1
map_feature_interrupt	bmi160.c	/^static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi1/;"	f	typeref:typename:int8_t	file:
map_hardware_interrupt	bmi160.c	/^static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi/;"	f	typeref:typename:int8_t	file:
map_read_len	bmi160.c	/^static int8_t map_read_len(uint16_t *len, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
min_threshold	bmi160_defs.h	/^    uint16_t min_threshold : 2;$/;"	m	struct:bmi160_acc_step_detect_int_cfg	typeref:typename:uint16_t:2
move_next_frame	bmi160.c	/^static void move_next_frame(uint16_t *data_index, uint8_t current_frame_length, const struct bmi/;"	f	typeref:typename:void	file:
no_motion_dur	bmi160_defs.h	/^    uint16_t no_motion_dur : 6;$/;"	m	struct:bmi160_acc_no_motion_int_cfg	typeref:typename:uint16_t:6
no_motion_sel	bmi160_defs.h	/^    uint16_t no_motion_sel : 1;$/;"	m	struct:bmi160_acc_no_motion_int_cfg	typeref:typename:uint16_t:1
no_motion_src	bmi160_defs.h	/^    uint16_t no_motion_src : 1;$/;"	m	struct:bmi160_acc_no_motion_int_cfg	typeref:typename:uint16_t:1
no_motion_thres	bmi160_defs.h	/^    uint8_t no_motion_thres;$/;"	m	struct:bmi160_acc_no_motion_int_cfg	typeref:typename:uint8_t
no_motion_x	bmi160_defs.h	/^    uint16_t no_motion_x : 1;$/;"	m	struct:bmi160_acc_no_motion_int_cfg	typeref:typename:uint16_t:1
no_motion_y	bmi160_defs.h	/^    uint16_t no_motion_y : 1;$/;"	m	struct:bmi160_acc_no_motion_int_cfg	typeref:typename:uint16_t:1
no_motion_z	bmi160_defs.h	/^    uint16_t no_motion_z : 1;$/;"	m	struct:bmi160_acc_no_motion_int_cfg	typeref:typename:uint16_t:1
nomo	bmi160_defs.h	/^    uint32_t nomo : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
null_ptr_check	bmi160.c	/^static int8_t null_ptr_check(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
odr	bmi160_defs.h	/^    uint8_t odr;$/;"	m	struct:bmi160_cfg	typeref:typename:uint8_t
off_acc_x	bmi160_defs.h	/^    int8_t off_acc_x;$/;"	m	struct:bmi160_offsets	typeref:typename:int8_t
off_acc_y	bmi160_defs.h	/^    int8_t off_acc_y;$/;"	m	struct:bmi160_offsets	typeref:typename:int8_t
off_acc_z	bmi160_defs.h	/^    int8_t off_acc_z;$/;"	m	struct:bmi160_offsets	typeref:typename:int8_t
off_gyro_x	bmi160_defs.h	/^    int16_t off_gyro_x;$/;"	m	struct:bmi160_offsets	typeref:typename:int16_t
off_gyro_y	bmi160_defs.h	/^    int16_t off_gyro_y;$/;"	m	struct:bmi160_offsets	typeref:typename:int16_t
off_gyro_z	bmi160_defs.h	/^    int16_t off_gyro_z;$/;"	m	struct:bmi160_offsets	typeref:typename:int16_t
orient	bmi160_defs.h	/^    uint32_t orient : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
orient_1_0	bmi160_defs.h	/^    uint32_t orient_1_0 : 2;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:2
orient_2	bmi160_defs.h	/^    uint32_t orient_2 : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
orient_blocking	bmi160_defs.h	/^    uint16_t orient_blocking : 2;$/;"	m	struct:bmi160_acc_orient_int_cfg	typeref:typename:uint16_t:2
orient_en	bmi160_defs.h	/^    uint8_t orient_en : 1;$/;"	m	struct:bmi160_acc_orient_int_cfg	typeref:typename:uint8_t:1
orient_hyst	bmi160_defs.h	/^    uint16_t orient_hyst : 4;$/;"	m	struct:bmi160_acc_orient_int_cfg	typeref:typename:uint16_t:4
orient_mode	bmi160_defs.h	/^    uint16_t orient_mode : 2;$/;"	m	struct:bmi160_acc_orient_int_cfg	typeref:typename:uint16_t:2
orient_theta	bmi160_defs.h	/^    uint16_t orient_theta : 6;$/;"	m	struct:bmi160_acc_orient_int_cfg	typeref:typename:uint16_t:6
orient_ud_en	bmi160_defs.h	/^    uint16_t orient_ud_en : 1;$/;"	m	struct:bmi160_acc_orient_int_cfg	typeref:typename:uint16_t:1
osp_delay_msec	osp_bmi160.c	/^void osp_delay_msec(uint32_t delay_ms) { osp_delay_usec(delay_ms * 1000); }$/;"	f	typeref:typename:void
osp_delay_usec	osp_bmi160.c	/^void osp_delay_usec(uint32_t delay_us) {$/;"	f	typeref:typename:void
osp_read_spi	osp_bmi160.c	/^int8_t osp_read_spi(uint8_t fd, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {$/;"	f	typeref:typename:int8_t
osp_write_spi	osp_bmi160.c	/^int8_t osp_write_spi(uint8_t fd, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {$/;"	f	typeref:typename:int8_t
output_en	bmi160_defs.h	/^    uint16_t output_en : 1;$/;"	m	struct:bmi160_int_pin_settg	typeref:typename:uint16_t:1
output_mode	bmi160_defs.h	/^    uint16_t output_mode : 1;$/;"	m	struct:bmi160_int_pin_settg	typeref:typename:uint16_t:1
output_type	bmi160_defs.h	/^    uint16_t output_type : 1;$/;"	m	struct:bmi160_int_pin_settg	typeref:typename:uint16_t:1
perform_accel_self_test	bmi160.c	/^static int8_t perform_accel_self_test(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
perform_gyro_self_test	bmi160.c	/^static int8_t perform_gyro_self_test(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
pmu_trigger_reserved	bmi160_defs.h	/^    uint32_t pmu_trigger_reserved : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
power	bmi160_defs.h	/^    uint8_t power;$/;"	m	struct:bmi160_cfg	typeref:typename:uint8_t
prev_accel_cfg	bmi160_defs.h	/^    struct bmi160_cfg prev_accel_cfg;$/;"	m	struct:bmi160_dev	typeref:struct:bmi160_cfg
prev_aux_cfg	bmi160_defs.h	/^    struct bmi160_aux_cfg prev_aux_cfg;$/;"	m	struct:bmi160_dev	typeref:struct:bmi160_aux_cfg
prev_gyro_cfg	bmi160_defs.h	/^    struct bmi160_cfg prev_gyro_cfg;$/;"	m	struct:bmi160_dev	typeref:struct:bmi160_cfg
process_accel_bw	bmi160.c	/^static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
process_accel_odr	bmi160.c	/^static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
process_accel_range	bmi160.c	/^static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
process_gyro_bw	bmi160.c	/^static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
process_gyro_odr	bmi160.c	/^static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
process_gyro_range	bmi160.c	/^static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
process_under_sampling	bmi160.c	/^static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
range	bmi160_defs.h	/^    uint8_t range;$/;"	m	struct:bmi160_cfg	typeref:typename:uint8_t
read	bmi160_defs.h	/^    bmi160_read_fptr_t read;$/;"	m	struct:bmi160_dev	typeref:typename:bmi160_read_fptr_t
read_write_len	bmi160_defs.h	/^    uint16_t read_write_len;$/;"	m	struct:bmi160_dev	typeref:typename:uint16_t
reserved	bmi160_defs.h	/^    uint32_t reserved : 2;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:2
reset_fifo_data_structure	bmi160.c	/^static void reset_fifo_data_structure(const struct bmi160_dev *dev)$/;"	f	typeref:typename:void	file:
s_tap	bmi160_defs.h	/^    uint32_t s_tap : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
sensor_time	bmi160_defs.h	/^    uint32_t sensor_time;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint32_t
sensortime	bmi160_defs.h	/^    uint32_t sensortime;$/;"	m	struct:bmi160_sensor_data	typeref:typename:uint32_t
set_accel_any_motion_int	bmi160.c	/^static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *d/;"	f	typeref:typename:int8_t	file:
set_accel_conf	bmi160.c	/^static int8_t set_accel_conf(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
set_accel_flat_detect_int	bmi160.c	/^static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160/;"	f	typeref:typename:int8_t	file:
set_accel_gyro_data_ready_int	bmi160.c	/^static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const str/;"	f	typeref:typename:int8_t	file:
set_accel_high_g_int	bmi160.c	/^static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev /;"	f	typeref:typename:int8_t	file:
set_accel_low_g_int	bmi160.c	/^static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev */;"	f	typeref:typename:int8_t	file:
set_accel_no_motion_int	bmi160.c	/^static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_d/;"	f	typeref:typename:int8_t	file:
set_accel_orientation_int	bmi160.c	/^static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160/;"	f	typeref:typename:int8_t	file:
set_accel_pwr	bmi160.c	/^static int8_t set_accel_pwr(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
set_accel_sig_motion_int	bmi160.c	/^static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *d/;"	f	typeref:typename:int8_t	file:
set_accel_step_detect_int	bmi160.c	/^static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160/;"	f	typeref:typename:int8_t	file:
set_accel_tap_int	bmi160.c	/^static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *de/;"	f	typeref:typename:int8_t	file:
set_fifo_full_int	bmi160.c	/^static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_d/;"	f	typeref:typename:int8_t	file:
set_fifo_watermark_int	bmi160.c	/^static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi/;"	f	typeref:typename:int8_t	file:
set_gyro_conf	bmi160.c	/^static int8_t set_gyro_conf(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
set_gyro_pwr	bmi160.c	/^static int8_t set_gyro_pwr(struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
set_intr_pin_config	bmi160.c	/^static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160/;"	f	typeref:typename:int8_t	file:
set_tap_config	examples/tap/tap.c	/^static int8_t set_tap_config(struct bmi160_dev *bmi160dev, uint8_t feature_enable) {$/;"	f	typeref:typename:int8_t	file:
sig_data_src	bmi160_defs.h	/^    uint8_t sig_data_src : 1;$/;"	m	struct:bmi160_acc_sig_mot_int_cfg	typeref:typename:uint8_t:1
sig_en	bmi160_defs.h	/^    uint8_t sig_en : 1;$/;"	m	struct:bmi160_acc_sig_mot_int_cfg	typeref:typename:uint8_t:1
sig_mot_proof	bmi160_defs.h	/^    uint8_t sig_mot_proof : 2;$/;"	m	struct:bmi160_acc_sig_mot_int_cfg	typeref:typename:uint8_t:2
sig_mot_skip	bmi160_defs.h	/^    uint8_t sig_mot_skip : 2;$/;"	m	struct:bmi160_acc_sig_mot_int_cfg	typeref:typename:uint8_t:2
sig_mot_thres	bmi160_defs.h	/^    uint8_t sig_mot_thres;$/;"	m	struct:bmi160_acc_sig_mot_int_cfg	typeref:typename:uint8_t
sigmot	bmi160_defs.h	/^    uint32_t sigmot : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
skipped_frame_count	bmi160_defs.h	/^    uint8_t skipped_frame_count;$/;"	m	struct:bmi160_fifo_frame	typeref:typename:uint8_t
step	bmi160_defs.h	/^    uint32_t step : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
step_detector_en	bmi160_defs.h	/^    uint16_t step_detector_en : 1;$/;"	m	struct:bmi160_acc_step_detect_int_cfg	typeref:typename:uint16_t:1
step_detector_mode	bmi160_defs.h	/^    uint16_t step_detector_mode : 2;$/;"	m	struct:bmi160_acc_step_detect_int_cfg	typeref:typename:uint16_t:2
step_min_buf	bmi160_defs.h	/^    uint16_t step_min_buf : 3;$/;"	m	struct:bmi160_acc_step_detect_int_cfg	typeref:typename:uint16_t:3
steptime_min	bmi160_defs.h	/^    uint16_t steptime_min : 3;$/;"	m	struct:bmi160_acc_step_detect_int_cfg	typeref:typename:uint16_t:3
tap_data_src	bmi160_defs.h	/^    uint16_t tap_data_src : 1;$/;"	m	struct:bmi160_acc_tap_int_cfg	typeref:typename:uint16_t:1
tap_dur	bmi160_defs.h	/^    uint16_t tap_dur : 3;$/;"	m	struct:bmi160_acc_tap_int_cfg	typeref:typename:uint16_t:3
tap_en	bmi160_defs.h	/^    uint16_t tap_en : 1;$/;"	m	struct:bmi160_acc_tap_int_cfg	typeref:typename:uint16_t:1
tap_first_x	bmi160_defs.h	/^    uint32_t tap_first_x : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
tap_first_y	bmi160_defs.h	/^    uint32_t tap_first_y : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
tap_first_z	bmi160_defs.h	/^    uint32_t tap_first_z : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
tap_quiet	bmi160_defs.h	/^    uint16_t tap_quiet : 1;$/;"	m	struct:bmi160_acc_tap_int_cfg	typeref:typename:uint16_t:1
tap_shock	bmi160_defs.h	/^    uint16_t tap_shock : 1;$/;"	m	struct:bmi160_acc_tap_int_cfg	typeref:typename:uint16_t:1
tap_sign	bmi160_defs.h	/^    uint32_t tap_sign : 1;$/;"	m	struct:bmi160_int_status_bits	typeref:typename:uint32_t:1
tap_thr	bmi160_defs.h	/^    uint16_t tap_thr : 5;$/;"	m	struct:bmi160_acc_tap_int_cfg	typeref:typename:uint16_t:5
trigger_foc	bmi160.c	/^static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)$/;"	f	typeref:typename:int8_t	file:
unpack_accel_data	bmi160.c	/^static void unpack_accel_data(struct bmi160_sensor_data *accel_data,$/;"	f	typeref:typename:void	file:
unpack_accel_frame	bmi160.c	/^static void unpack_accel_frame(struct bmi160_sensor_data *acc,$/;"	f	typeref:typename:void	file:
unpack_aux_data	bmi160.c	/^static void unpack_aux_data(struct bmi160_aux_data *aux_data, uint16_t data_start_index, const s/;"	f	typeref:typename:void	file:
unpack_aux_frame	bmi160.c	/^static void unpack_aux_frame(struct bmi160_aux_data *aux_data,$/;"	f	typeref:typename:void	file:
unpack_gyro_data	bmi160.c	/^static void unpack_gyro_data(struct bmi160_sensor_data *gyro_data,$/;"	f	typeref:typename:void	file:
unpack_gyro_frame	bmi160.c	/^static void unpack_gyro_frame(struct bmi160_sensor_data *gyro,$/;"	f	typeref:typename:void	file:
unpack_sensortime_frame	bmi160.c	/^static void unpack_sensortime_frame(uint16_t *data_index, const struct bmi160_dev *dev)$/;"	f	typeref:typename:void	file:
unpack_skipped_frame	bmi160.c	/^static void unpack_skipped_frame(uint16_t *data_index, const struct bmi160_dev *dev)$/;"	f	typeref:typename:void	file:
validate_accel_self_test	bmi160.c	/^static int8_t validate_accel_self_test(const struct bmi160_sensor_data *accel_pos,$/;"	f	typeref:typename:int8_t	file:
validate_gyro_self_test	bmi160.c	/^static int8_t validate_gyro_self_test(const struct bmi160_dev *dev)$/;"	f	typeref:typename:int8_t	file:
write	bmi160_defs.h	/^    bmi160_write_fptr_t write;$/;"	m	struct:bmi160_dev	typeref:typename:bmi160_write_fptr_t
x	bmi160_defs.h	/^    int16_t x;$/;"	m	struct:bmi160_sensor_data	typeref:typename:int16_t
y	bmi160_defs.h	/^    int16_t y;$/;"	m	struct:bmi160_sensor_data	typeref:typename:int16_t
z	bmi160_defs.h	/^    int16_t z;$/;"	m	struct:bmi160_sensor_data	typeref:typename:int16_t
